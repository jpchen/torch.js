var FFI = require('ffi'),
    ArrayType = require('ref-array'),
    Struct = require('ref-struct'),
    ref = require('ref');

var voidPtr = ref.refType(ref.types.void);

exports.CONSTANTS = {
};

var THFloatTensor_jscallback = exports.THFloatTensor_jscallback = FFI.Function(ref.types.float, [
  ref.types.float,
]);
var THFloatTensor_jscallbackPtr = exports.THFloatTensor_jscallbackPtr = ref.refType(THFloatTensor_jscallback);
var THErrorHandlerFunction = exports.THErrorHandlerFunction = FFI.Function(ref.types.void, [
  ref.types.CString,
  voidPtr,
]);
var THErrorHandlerFunctionPtr = exports.THErrorHandlerFunctionPtr = ref.refType(THErrorHandlerFunction);
var THArgErrorHandlerFunction = exports.THArgErrorHandlerFunction = FFI.Function(ref.types.void, [
  ref.types.int32,
  ref.types.CString,
  voidPtr,
]);
var THArgErrorHandlerFunctionPtr = exports.THArgErrorHandlerFunctionPtr = ref.refType(THArgErrorHandlerFunction);
var ptrdiff_t = exports.ptrdiff_t = voidPtr;
var ptrdiff_tPtr = exports.ptrdiff_tPtr = ref.refType(ptrdiff_t);
var THGenerator = exports.THGenerator = Struct({
  the_initial_seed: ref.types.ulong,
  left: ref.types.int32,
  seeded: ref.types.int32,
  next: ref.types.ulong,
  state: ArrayType(ref.types.ulong, 624),
  normal_x: ref.types.double,
  normal_y: ref.types.double,
  normal_rho: ref.types.double,
  normal_is_valid: ref.types.int32,
});
var THGeneratorPtr = exports.THGeneratorPtr = ref.refType(THGenerator);
var THMapAllocatorContext = exports.THMapAllocatorContext = voidPtr;
var THMapAllocatorContextPtr = exports.THMapAllocatorContextPtr = ref.refType(THMapAllocatorContext);
var THAllocator = exports.THAllocator = Struct({
  malloc: voidPtr,
  realloc: voidPtr,
  free: voidPtr,
});
var THAllocatorPtr = exports.THAllocatorPtr = ref.refType(THAllocator);
var THByteStorage = exports.THByteStorage = Struct({
  data: ref.refType(ref.types.uchar),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THByteStoragePtr = exports.THByteStoragePtr = ref.refType(THByteStorage);
var THCharStorage = exports.THCharStorage = Struct({
  data: ref.types.CString,
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCharStoragePtr = exports.THCharStoragePtr = ref.refType(THCharStorage);
var THShortStorage = exports.THShortStorage = Struct({
  data: ref.refType(ref.types.short),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THShortStoragePtr = exports.THShortStoragePtr = ref.refType(THShortStorage);
var THIntStorage = exports.THIntStorage = Struct({
  data: ref.refType(ref.types.int32),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THIntStoragePtr = exports.THIntStoragePtr = ref.refType(THIntStorage);
var THLongStorage = exports.THLongStorage = Struct({
  data: ref.refType(ref.types.long),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THLongStoragePtr = exports.THLongStoragePtr = ref.refType(THLongStorage);
var THFloatStorage = exports.THFloatStorage = Struct({
  data: ref.refType(ref.types.float),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THFloatStoragePtr = exports.THFloatStoragePtr = ref.refType(THFloatStorage);
var THDoubleStorage = exports.THDoubleStorage = Struct({
  data: ref.refType(ref.types.double),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THDoubleStoragePtr = exports.THDoubleStoragePtr = ref.refType(THDoubleStorage);
var THHalf = exports.THHalf = voidPtr;
var THHalfPtr = exports.THHalfPtr = ref.refType(THHalf);
var THHalfStorage = exports.THHalfStorage = Struct({
  data: THHalfPtr,
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THHalfStoragePtr = exports.THHalfStoragePtr = ref.refType(THHalfStorage);
var THByteTensor = exports.THByteTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THByteStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THByteTensorPtr = exports.THByteTensorPtr = ref.refType(THByteTensor);
var THDescBuff = exports.THDescBuff = Struct({
  str: ArrayType(ref.types.char, 64),
});
var THDescBuffPtr = exports.THDescBuffPtr = ref.refType(THDescBuff);
var THCharTensor = exports.THCharTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCharStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCharTensorPtr = exports.THCharTensorPtr = ref.refType(THCharTensor);
var THShortTensor = exports.THShortTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THShortStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THShortTensorPtr = exports.THShortTensorPtr = ref.refType(THShortTensor);
var THIntTensor = exports.THIntTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THIntStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THIntTensorPtr = exports.THIntTensorPtr = ref.refType(THIntTensor);
var THLongTensor = exports.THLongTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THLongStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THLongTensorPtr = exports.THLongTensorPtr = ref.refType(THLongTensor);
var THFloatTensor = exports.THFloatTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THFloatStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THFloatTensorPtr = exports.THFloatTensorPtr = ref.refType(THFloatTensor);
var THDoubleTensor = exports.THDoubleTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THDoubleStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THDoubleTensorPtr = exports.THDoubleTensorPtr = ref.refType(THDoubleTensor);
var THHalfTensor = exports.THHalfTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THHalfStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THHalfTensorPtr = exports.THHalfTensorPtr = ref.refType(THHalfTensor);
var THFile = exports.THFile = voidPtr;
var THFilePtr = exports.THFilePtr = ref.refType(THFile);

// exports.TH = new FFI.Library('libTH', {
exports.TH = new FFI.Library('/Users/jpchen/jstorch/torch.js/libTH/build/libmTH', {
  THLog1p: [ref.types.double, [
    ref.types.double,
  ]],
  THSetErrorHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THSetArgErrorHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THAlloc: [voidPtr, [
    ref.types.long,
  ]],
  THRealloc: [voidPtr, [
    voidPtr,
    ref.types.long,
  ]],
  THFree: [ref.types.void, [
    voidPtr,
  ]],
  THSetGCHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THHeapUpdate: [ref.types.void, [
    ref.types.long,
  ]],
  THByteBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_dot: [ref.types.uchar, [
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THCharBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_dot: [ref.types.char, [
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
  ]],
  THShortBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_dot: [ref.types.short, [
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THIntBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_dot: [ref.types.int32, [
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THLongBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_dot: [ref.types.long, [
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THFloatBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_dot: [ref.types.float, [
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THDoubleBlas_swap: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_scal: [ref.types.void, [
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_copy: [ref.types.void, [
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_axpy: [ref.types.void, [
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_dot: [ref.types.double, [
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_gemv: [ref.types.void, [
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_ger: [ref.types.void, [
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleBlas_gemm: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THByteLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THByteLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.uchar),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.char,
    ref.types.CString,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THCharLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
    ref.types.CString,
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THShortLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.short),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THIntLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THLongLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THFloatLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.float),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_gesv: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_trtrs: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_gels: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_syev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_geev: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_gesvd: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_getrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_getri: [ref.types.void, [
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_potrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_potri: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_potrs: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_pstrf: [ref.types.void, [
    ref.types.char,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_geqrf: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_orgqr: [ref.types.void, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THDoubleLapack_ormqr: [ref.types.void, [
    ref.types.char,
    ref.types.char,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.double),
    ref.types.int32,
    ref.refType(ref.types.int32),
  ]],
  THAtomicSet: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THAtomicGet: [ref.types.int32, [
    ref.refType(ref.types.int32),
  ]],
  THAtomicAdd: [ref.types.int32, [
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THAtomicCompareAndSwap: [ref.types.int32, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.types.int32,
  ]],
  THAtomicIncrementRef: [ref.types.void, [
    ref.refType(ref.types.int32),
  ]],
  THAtomicDecrementRef: [ref.types.int32, [
    ref.refType(ref.types.int32),
  ]],
  THAtomicSetLong: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THAtomicGetLong: [ref.types.long, [
    ref.refType(ref.types.long),
  ]],
  THAtomicAddLong: [ref.types.long, [
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THAtomicCompareAndSwapLong: [ref.types.long, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
  ]],
  THByteVector_fill: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.types.long,
  ]],
  THByteVector_add: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.types.long,
  ]],
  THByteVector_diff: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteVector_scale: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.types.long,
  ]],
  THByteVector_mul: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THCharVector_fill: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.long,
  ]],
  THCharVector_add: [ref.types.void, [
    ref.types.CString,
    ref.types.CString,
    ref.types.char,
    ref.types.long,
  ]],
  THCharVector_diff: [ref.types.void, [
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharVector_scale: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.long,
  ]],
  THCharVector_mul: [ref.types.void, [
    ref.types.CString,
    ref.types.CString,
    ref.types.long,
  ]],
  THCharVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THShortVector_fill: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.types.long,
  ]],
  THShortVector_add: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.short,
    ref.types.long,
  ]],
  THShortVector_diff: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortVector_scale: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.types.long,
  ]],
  THShortVector_mul: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THIntVector_fill: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.types.long,
  ]],
  THIntVector_add: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.types.long,
  ]],
  THIntVector_diff: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntVector_scale: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.types.long,
  ]],
  THIntVector_mul: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THLongVector_fill: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
  ]],
  THLongVector_add: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
  ]],
  THLongVector_diff: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongVector_scale: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
  ]],
  THLongVector_mul: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THFloatVector_fill: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.types.long,
  ]],
  THFloatVector_add: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.float,
    ref.types.long,
  ]],
  THFloatVector_diff: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatVector_scale: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.types.long,
  ]],
  THFloatVector_mul: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THDoubleVector_fill: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleVector_add: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleVector_diff: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleVector_scale: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleVector_mul: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleVector_vectorDispatchInit: [ref.types.void, [
  ]],
  THLogAdd: [ref.types.double, [
    ref.types.double,
    ref.types.double,
  ]],
  THLogSub: [ref.types.double, [
    ref.types.double,
    ref.types.double,
  ]],
  THExpMinusApprox: [ref.types.double, [
    ref.types.double,
  ]],
  THGenerator_new: [THGeneratorPtr, [
  ]],
  THGenerator_copy: [THGeneratorPtr, [
    THGeneratorPtr,
    THGeneratorPtr,
  ]],
  THGenerator_free: [ref.types.void, [
    THGeneratorPtr,
  ]],
  THGenerator_isValid: [ref.types.int32, [
    THGeneratorPtr,
  ]],
  THRandom_seed: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_manualSeed: [ref.types.void, [
    THGeneratorPtr,
    ref.types.ulong,
  ]],
  THRandom_initialSeed: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_random: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_uniform: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_normal: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_exponential: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THRandom_cauchy: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_logNormal: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_geometric: [ref.types.int32, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THRandom_bernoulli: [ref.types.int32, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THMapAllocatorContext_new: [THMapAllocatorContext, [
    ref.types.CString,
    ref.types.int32,
  ]],
  THMapAllocatorContext_newWithFd: [THMapAllocatorContextPtr, [
    ref.types.CString,
    ref.types.int32,
    ref.types.int32,
  ]],
  THMapAllocatorContext_filename: [ref.types.CString, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_fd: [ref.types.int32, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_size: [ref.types.long, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_free: [ref.types.void, [
    THMapAllocatorContextPtr,
  ]],
  THRefcountedMapAllocator_incref: [ref.types.void, [
    THMapAllocatorContextPtr,
    voidPtr,
  ]],
  THRefcountedMapAllocator_decref: [ref.types.int32, [
    THMapAllocatorContextPtr,
    voidPtr,
  ]],
  THByteStorage_data: [ref.refType(ref.types.uchar), [
    THByteStoragePtr,
  ]],
  THByteStorage_size: [ref.types.long, [
    THByteStoragePtr,
  ]],
  THByteStorage_elementSize: [ref.types.int32, [
  ]],
  THByteStorage_set: [ref.types.void, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteStorage_get: [ref.types.uchar, [
    THByteStoragePtr,
    ref.types.long,
  ]],
  THByteStorage_new: [THByteStoragePtr, [
  ]],
  THByteStorage_newWithSize: [THByteStoragePtr, [
    ref.types.long,
  ]],
  THByteStorage_newWithSize1: [THByteStoragePtr, [
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize2: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize3: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize4: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithMapping: [THByteStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THByteStorage_newWithData: [THByteStoragePtr, [
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteStorage_newWithAllocator: [THByteStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THByteStorage_newWithDataAndAllocator: [THByteStoragePtr, [
    ref.refType(ref.types.uchar),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THByteStorage_setFlag: [ref.types.void, [
    THByteStoragePtr,
    ref.types.char,
  ]],
  THByteStorage_clearFlag: [ref.types.void, [
    THByteStoragePtr,
    ref.types.char,
  ]],
  THByteStorage_retain: [ref.types.void, [
    THByteStoragePtr,
  ]],
  THByteStorage_swap: [ref.types.void, [
    THByteStoragePtr,
    THByteStoragePtr,
  ]],
  THByteStorage_free: [ref.types.void, [
    THByteStoragePtr,
  ]],
  THByteStorage_resize: [ref.types.void, [
    THByteStoragePtr,
    ref.types.long,
  ]],
  THByteStorage_fill: [ref.types.void, [
    THByteStoragePtr,
    ref.types.uchar,
  ]],
  THCharStorage_data: [ref.types.CString, [
    THCharStoragePtr,
  ]],
  THCharStorage_size: [ref.types.long, [
    THCharStoragePtr,
  ]],
  THCharStorage_elementSize: [ref.types.int32, [
  ]],
  THCharStorage_set: [ref.types.void, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCharStorage_get: [ref.types.char, [
    THCharStoragePtr,
    ref.types.long,
  ]],
  THCharStorage_new: [THCharStoragePtr, [
  ]],
  THCharStorage_newWithSize: [THCharStoragePtr, [
    ref.types.long,
  ]],
  THCharStorage_newWithSize1: [THCharStoragePtr, [
    ref.types.char,
  ]],
  THCharStorage_newWithSize2: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithSize3: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithSize4: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithMapping: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCharStorage_newWithData: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
  ]],
  THCharStorage_newWithAllocator: [THCharStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCharStorage_newWithDataAndAllocator: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCharStorage_setFlag: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THCharStorage_clearFlag: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THCharStorage_retain: [ref.types.void, [
    THCharStoragePtr,
  ]],
  THCharStorage_swap: [ref.types.void, [
    THCharStoragePtr,
    THCharStoragePtr,
  ]],
  THCharStorage_free: [ref.types.void, [
    THCharStoragePtr,
  ]],
  THCharStorage_resize: [ref.types.void, [
    THCharStoragePtr,
    ref.types.long,
  ]],
  THCharStorage_fill: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_data: [ref.refType(ref.types.short), [
    THShortStoragePtr,
  ]],
  THShortStorage_size: [ref.types.long, [
    THShortStoragePtr,
  ]],
  THShortStorage_elementSize: [ref.types.int32, [
  ]],
  THShortStorage_set: [ref.types.void, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.short,
  ]],
  THShortStorage_get: [ref.types.short, [
    THShortStoragePtr,
    ref.types.long,
  ]],
  THShortStorage_new: [THShortStoragePtr, [
  ]],
  THShortStorage_newWithSize: [THShortStoragePtr, [
    ref.types.long,
  ]],
  THShortStorage_newWithSize1: [THShortStoragePtr, [
    ref.types.short,
  ]],
  THShortStorage_newWithSize2: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithSize3: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithSize4: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithMapping: [THShortStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THShortStorage_newWithData: [THShortStoragePtr, [
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortStorage_newWithAllocator: [THShortStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THShortStorage_newWithDataAndAllocator: [THShortStoragePtr, [
    ref.refType(ref.types.short),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THShortStorage_setFlag: [ref.types.void, [
    THShortStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_clearFlag: [ref.types.void, [
    THShortStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_retain: [ref.types.void, [
    THShortStoragePtr,
  ]],
  THShortStorage_swap: [ref.types.void, [
    THShortStoragePtr,
    THShortStoragePtr,
  ]],
  THShortStorage_free: [ref.types.void, [
    THShortStoragePtr,
  ]],
  THShortStorage_resize: [ref.types.void, [
    THShortStoragePtr,
    ref.types.long,
  ]],
  THShortStorage_fill: [ref.types.void, [
    THShortStoragePtr,
    ref.types.short,
  ]],
  THIntStorage_data: [ref.refType(ref.types.int32), [
    THIntStoragePtr,
  ]],
  THIntStorage_size: [ref.types.long, [
    THIntStoragePtr,
  ]],
  THIntStorage_elementSize: [ref.types.int32, [
  ]],
  THIntStorage_set: [ref.types.void, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntStorage_get: [ref.types.int32, [
    THIntStoragePtr,
    ref.types.long,
  ]],
  THIntStorage_new: [THIntStoragePtr, [
  ]],
  THIntStorage_newWithSize: [THIntStoragePtr, [
    ref.types.long,
  ]],
  THIntStorage_newWithSize1: [THIntStoragePtr, [
    ref.types.int32,
  ]],
  THIntStorage_newWithSize2: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithSize3: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithSize4: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithMapping: [THIntStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntStorage_newWithData: [THIntStoragePtr, [
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntStorage_newWithAllocator: [THIntStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THIntStorage_newWithDataAndAllocator: [THIntStoragePtr, [
    ref.refType(ref.types.int32),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THIntStorage_setFlag: [ref.types.void, [
    THIntStoragePtr,
    ref.types.char,
  ]],
  THIntStorage_clearFlag: [ref.types.void, [
    THIntStoragePtr,
    ref.types.char,
  ]],
  THIntStorage_retain: [ref.types.void, [
    THIntStoragePtr,
  ]],
  THIntStorage_swap: [ref.types.void, [
    THIntStoragePtr,
    THIntStoragePtr,
  ]],
  THIntStorage_free: [ref.types.void, [
    THIntStoragePtr,
  ]],
  THIntStorage_resize: [ref.types.void, [
    THIntStoragePtr,
    ref.types.long,
  ]],
  THIntStorage_fill: [ref.types.void, [
    THIntStoragePtr,
    ref.types.int32,
  ]],
  THLongStorage_data: [ref.refType(ref.types.long), [
    THLongStoragePtr,
  ]],
  THLongStorage_size: [ref.types.long, [
    THLongStoragePtr,
  ]],
  THLongStorage_elementSize: [ref.types.int32, [
  ]],
  THLongStorage_set: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_get: [ref.types.long, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THLongStorage_new: [THLongStoragePtr, [
  ]],
  THLongStorage_newWithSize: [THLongStoragePtr, [
    ref.types.long,
  ]],
  THLongStorage_newWithSize1: [THLongStoragePtr, [
    ref.types.long,
  ]],
  THLongStorage_newWithSize2: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithSize3: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithSize4: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithMapping: [THLongStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THLongStorage_newWithData: [THLongStoragePtr, [
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongStorage_newWithAllocator: [THLongStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THLongStorage_newWithDataAndAllocator: [THLongStoragePtr, [
    ref.refType(ref.types.long),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THLongStorage_setFlag: [ref.types.void, [
    THLongStoragePtr,
    ref.types.char,
  ]],
  THLongStorage_clearFlag: [ref.types.void, [
    THLongStoragePtr,
    ref.types.char,
  ]],
  THLongStorage_retain: [ref.types.void, [
    THLongStoragePtr,
  ]],
  THLongStorage_swap: [ref.types.void, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongStorage_free: [ref.types.void, [
    THLongStoragePtr,
  ]],
  THLongStorage_resize: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THLongStorage_fill: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_data: [ref.refType(ref.types.float), [
    THFloatStoragePtr,
  ]],
  THFloatStorage_size: [ref.types.long, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_elementSize: [ref.types.int32, [
  ]],
  THFloatStorage_set: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatStorage_get: [ref.types.float, [
    THFloatStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_new: [THFloatStoragePtr, [
  ]],
  THFloatStorage_newWithSize: [THFloatStoragePtr, [
    ref.types.long,
  ]],
  THFloatStorage_newWithSize1: [THFloatStoragePtr, [
    ref.types.float,
  ]],
  THFloatStorage_newWithSize2: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithSize3: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithSize4: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithMapping: [THFloatStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THFloatStorage_newWithData: [THFloatStoragePtr, [
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatStorage_newWithAllocator: [THFloatStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THFloatStorage_newWithDataAndAllocator: [THFloatStoragePtr, [
    ref.refType(ref.types.float),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THFloatStorage_setFlag: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.char,
  ]],
  THFloatStorage_clearFlag: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.char,
  ]],
  THFloatStorage_retain: [ref.types.void, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_swap: [ref.types.void, [
    THFloatStoragePtr,
    THFloatStoragePtr,
  ]],
  THFloatStorage_free: [ref.types.void, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_resize: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_fill: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.float,
  ]],
  THDoubleStorage_data: [ref.refType(ref.types.double), [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_size: [ref.types.long, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_elementSize: [ref.types.int32, [
  ]],
  THDoubleStorage_set: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleStorage_get: [ref.types.double, [
    THDoubleStoragePtr,
    ref.types.long,
  ]],
  THDoubleStorage_new: [THDoubleStoragePtr, [
  ]],
  THDoubleStorage_newWithSize: [THDoubleStoragePtr, [
    ref.types.long,
  ]],
  THDoubleStorage_newWithSize1: [THDoubleStoragePtr, [
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize2: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize3: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize4: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithMapping: [THDoubleStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THDoubleStorage_newWithData: [THDoubleStoragePtr, [
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleStorage_newWithAllocator: [THDoubleStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THDoubleStorage_newWithDataAndAllocator: [THDoubleStoragePtr, [
    ref.refType(ref.types.double),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THDoubleStorage_setFlag: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.char,
  ]],
  THDoubleStorage_clearFlag: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.char,
  ]],
  THDoubleStorage_retain: [ref.types.void, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_swap: [ref.types.void, [
    THDoubleStoragePtr,
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_free: [ref.types.void, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_resize: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.long,
  ]],
  THDoubleStorage_fill: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.double,
  ]],
  THByteStorage_rawCopy: [ref.types.void, [
    THByteStoragePtr,
    ref.refType(ref.types.uchar),
  ]],
  THByteStorage_copy: [ref.types.void, [
    THByteStoragePtr,
    THByteStoragePtr,
  ]],
  THByteStorage_copyByte: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyChar: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyShort: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyInt: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyLong: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyFloat: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyDouble: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_rawCopy: [ref.types.void, [
    THCharStoragePtr,
    ref.types.CString,
  ]],
  THCharStorage_copy: [ref.types.void, [
    THCharStoragePtr,
    THCharStoragePtr,
  ]],
  THCharStorage_copyByte: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyChar: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyShort: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyInt: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyLong: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyFloat: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyDouble: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_rawCopy: [ref.types.void, [
    THShortStoragePtr,
    ref.refType(ref.types.short),
  ]],
  THShortStorage_copy: [ref.types.void, [
    THShortStoragePtr,
    THShortStoragePtr,
  ]],
  THShortStorage_copyByte: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyChar: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyShort: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyInt: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyLong: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyFloat: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyDouble: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_rawCopy: [ref.types.void, [
    THIntStoragePtr,
    ref.refType(ref.types.int32),
  ]],
  THIntStorage_copy: [ref.types.void, [
    THIntStoragePtr,
    THIntStoragePtr,
  ]],
  THIntStorage_copyByte: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyChar: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyShort: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyInt: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyLong: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyFloat: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyDouble: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_rawCopy: [ref.types.void, [
    THLongStoragePtr,
    ref.refType(ref.types.long),
  ]],
  THLongStorage_copy: [ref.types.void, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongStorage_copyByte: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyChar: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyShort: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyInt: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyLong: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyFloat: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyDouble: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_rawCopy: [ref.types.void, [
    THFloatStoragePtr,
    ref.refType(ref.types.float),
  ]],
  THFloatStorage_copy: [ref.types.void, [
    THFloatStoragePtr,
    THFloatStoragePtr,
  ]],
  THFloatStorage_copyByte: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyChar: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyShort: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyInt: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyLong: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyFloat: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyDouble: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_rawCopy: [ref.types.void, [
    THDoubleStoragePtr,
    ref.refType(ref.types.double),
  ]],
  THDoubleStorage_copy: [ref.types.void, [
    THDoubleStoragePtr,
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_copyByte: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyChar: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyShort: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyInt: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyLong: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyFloat: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyDouble: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THByteTensor_storage: [THByteStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_storageOffset: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_nDimension: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_size: [ref.types.long, [
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_stride: [ref.types.long, [
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_newSizeOf: [THLongStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newStrideOf: [THLongStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_data: [ref.refType(ref.types.uchar), [
    THByteTensorPtr,
  ]],
  THByteTensor_setFlag: [ref.types.void, [
    THByteTensorPtr,
    ref.types.char,
  ]],
  THByteTensor_clearFlag: [ref.types.void, [
    THByteTensorPtr,
    ref.types.char,
  ]],
  THByteTensor_new: [THByteTensorPtr, [
  ]],
  THByteTensor_newWithTensor: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newWithStorage: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_newWithStorage1d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage2d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage3d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage4d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize: [THByteTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_newWithSize1d: [THByteTensorPtr, [
    ref.types.long,
  ]],
  THByteTensor_newWithSize2d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize3d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize4d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newClone: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newContiguous: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newSelect: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THByteTensor_newNarrow: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newTranspose: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_newUnfold: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_resizeAs: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_resize1d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_resize2d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize3d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize4d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize5d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_set: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_setStorage: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_setStorage1d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage2d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage3d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage4d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_narrow: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_select: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THByteTensor_transpose: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_unfold: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_squeeze: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_squeeze1d: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_isContiguous: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_isSameSizeAs: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_isSetTo: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_isSize: [ref.types.int32, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_nElement: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_retain: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_free: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_freeCopyTo: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_set1d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set2d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set3d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set4d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_get1d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_get2d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_get3d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_get4d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_desc: [THDescBuff, [
    THByteTensorPtr,
  ]],
  THByteTensor_sizeDesc: [THDescBuff, [
    THByteTensorPtr,
  ]],
  THCharTensor_storage: [THCharStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_storageOffset: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_nDimension: [ref.types.int32, [
    THCharTensorPtr,
  ]],
  THCharTensor_size: [ref.types.long, [
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_stride: [ref.types.long, [
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_newSizeOf: [THLongStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newStrideOf: [THLongStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_data: [ref.types.CString, [
    THCharTensorPtr,
  ]],
  THCharTensor_setFlag: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_clearFlag: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_new: [THCharTensorPtr, [
  ]],
  THCharTensor_newWithTensor: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newWithStorage: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_newWithStorage1d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage2d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage3d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage4d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize: [THCharTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_newWithSize1d: [THCharTensorPtr, [
    ref.types.long,
  ]],
  THCharTensor_newWithSize2d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize3d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize4d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newClone: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newContiguous: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newSelect: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCharTensor_newNarrow: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newTranspose: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_newUnfold: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_resizeAs: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_resize1d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_resize2d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize3d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize4d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize5d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_set: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_setStorage: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_setStorage1d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage2d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage3d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage4d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_narrow: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_select: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCharTensor_transpose: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_unfold: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_squeeze: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_squeeze1d: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_isContiguous: [ref.types.int32, [
    THCharTensorPtr,
  ]],
  THCharTensor_isSameSizeAs: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_isSetTo: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_isSize: [ref.types.int32, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_nElement: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_retain: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_free: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_freeCopyTo: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_set1d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set2d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set3d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set4d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_get1d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_get2d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_get3d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_get4d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_desc: [THDescBuff, [
    THCharTensorPtr,
  ]],
  THCharTensor_sizeDesc: [THDescBuff, [
    THCharTensorPtr,
  ]],
  THShortTensor_storage: [THShortStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_storageOffset: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_nDimension: [ref.types.int32, [
    THShortTensorPtr,
  ]],
  THShortTensor_size: [ref.types.long, [
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_stride: [ref.types.long, [
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_newSizeOf: [THLongStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newStrideOf: [THLongStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_data: [ref.refType(ref.types.short), [
    THShortTensorPtr,
  ]],
  THShortTensor_setFlag: [ref.types.void, [
    THShortTensorPtr,
    ref.types.char,
  ]],
  THShortTensor_clearFlag: [ref.types.void, [
    THShortTensorPtr,
    ref.types.char,
  ]],
  THShortTensor_new: [THShortTensorPtr, [
  ]],
  THShortTensor_newWithTensor: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newWithStorage: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_newWithStorage1d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage2d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage3d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage4d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize: [THShortTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_newWithSize1d: [THShortTensorPtr, [
    ref.types.long,
  ]],
  THShortTensor_newWithSize2d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize3d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize4d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newClone: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newContiguous: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newSelect: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THShortTensor_newNarrow: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newTranspose: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_newUnfold: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_resizeAs: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_resize1d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_resize2d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize3d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize4d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize5d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_set: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_setStorage: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_setStorage1d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage2d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage3d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage4d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_narrow: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_select: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THShortTensor_transpose: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_unfold: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_squeeze: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_squeeze1d: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_isContiguous: [ref.types.int32, [
    THShortTensorPtr,
  ]],
  THShortTensor_isSameSizeAs: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_isSetTo: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_isSize: [ref.types.int32, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_nElement: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_retain: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_free: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_freeCopyTo: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_set1d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set2d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set3d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set4d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_get1d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_get2d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_get3d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_get4d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_desc: [THDescBuff, [
    THShortTensorPtr,
  ]],
  THShortTensor_sizeDesc: [THDescBuff, [
    THShortTensorPtr,
  ]],
  THIntTensor_storage: [THIntStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_storageOffset: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_nDimension: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_size: [ref.types.long, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_stride: [ref.types.long, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_newSizeOf: [THLongStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newStrideOf: [THLongStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_data: [ref.refType(ref.types.int32), [
    THIntTensorPtr,
  ]],
  THIntTensor_setFlag: [ref.types.void, [
    THIntTensorPtr,
    ref.types.char,
  ]],
  THIntTensor_clearFlag: [ref.types.void, [
    THIntTensorPtr,
    ref.types.char,
  ]],
  THIntTensor_new: [THIntTensorPtr, [
  ]],
  THIntTensor_newWithTensor: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newWithStorage: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_newWithStorage1d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage2d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage3d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage4d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize: [THIntTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_newWithSize1d: [THIntTensorPtr, [
    ref.types.long,
  ]],
  THIntTensor_newWithSize2d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize3d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize4d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newClone: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newContiguous: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newSelect: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THIntTensor_newNarrow: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newTranspose: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_newUnfold: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_resizeAs: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_resize1d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_resize2d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize3d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize4d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize5d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_set: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_setStorage: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_setStorage1d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage2d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage3d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage4d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_narrow: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_select: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THIntTensor_transpose: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_unfold: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_squeeze: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_squeeze1d: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_isContiguous: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_isSameSizeAs: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_isSetTo: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_isSize: [ref.types.int32, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_nElement: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_retain: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_free: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_freeCopyTo: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_set1d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set2d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set3d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set4d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_get1d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_get2d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_get3d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_get4d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_desc: [THDescBuff, [
    THIntTensorPtr,
  ]],
  THIntTensor_sizeDesc: [THDescBuff, [
    THIntTensorPtr,
  ]],
  THLongTensor_storage: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_storageOffset: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_nDimension: [ref.types.int32, [
    THLongTensorPtr,
  ]],
  THLongTensor_size: [ref.types.long, [
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_stride: [ref.types.long, [
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_newSizeOf: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newStrideOf: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_data: [ref.refType(ref.types.long), [
    THLongTensorPtr,
  ]],
  THLongTensor_setFlag: [ref.types.void, [
    THLongTensorPtr,
    ref.types.char,
  ]],
  THLongTensor_clearFlag: [ref.types.void, [
    THLongTensorPtr,
    ref.types.char,
  ]],
  THLongTensor_new: [THLongTensorPtr, [
  ]],
  THLongTensor_newWithTensor: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newWithStorage: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_newWithStorage1d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage2d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage3d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage4d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize: [THLongTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_newWithSize1d: [THLongTensorPtr, [
    ref.types.long,
  ]],
  THLongTensor_newWithSize2d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize3d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize4d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newClone: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newContiguous: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newSelect: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THLongTensor_newNarrow: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newTranspose: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_newUnfold: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_resizeAs: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_resize1d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_resize2d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize3d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize4d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize5d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_setStorage: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_setStorage1d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage2d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage3d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage4d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_narrow: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_select: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THLongTensor_transpose: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_unfold: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_squeeze: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_squeeze1d: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_isContiguous: [ref.types.int32, [
    THLongTensorPtr,
  ]],
  THLongTensor_isSameSizeAs: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_isSetTo: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_isSize: [ref.types.int32, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_nElement: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_retain: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_free: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_freeCopyTo: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_set1d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set2d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set3d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set4d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get1d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_get2d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get3d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get4d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_desc: [THDescBuff, [
    THLongTensorPtr,
  ]],
  THLongTensor_sizeDesc: [THDescBuff, [
    THLongTensorPtr,
  ]],
  THFloatTensor_storage: [THFloatStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_storageOffset: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_nDimension: [ref.types.int32, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_size: [ref.types.long, [
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_stride: [ref.types.long, [
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_newSizeOf: [THLongStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newStrideOf: [THLongStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_data: [ref.refType(ref.types.float), [
    THFloatTensorPtr,
  ]],
  THFloatTensor_setFlag: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.char,
  ]],
  THFloatTensor_clearFlag: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.char,
  ]],
  THFloatTensor_new: [THFloatTensorPtr, [
  ]],
  THFloatTensor_newWithTensor: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newWithStorage: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_newWithStorage1d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage2d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage3d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage4d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize: [THFloatTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_newWithSize1d: [THFloatTensorPtr, [
    ref.types.long,
  ]],
  THFloatTensor_newWithSize2d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize3d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize4d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newClone: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newContiguous: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newSelect: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THFloatTensor_newNarrow: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newTranspose: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_newUnfold: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_resizeAs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_resize1d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_resize2d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize3d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize4d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize5d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_set: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_setStorage: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_setStorage1d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage2d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage3d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage4d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_narrow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_select: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THFloatTensor_transpose: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_unfold: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_squeeze: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_squeeze1d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_isContiguous: [ref.types.int32, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSameSizeAs: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSetTo: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSize: [ref.types.int32, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_nElement: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_retain: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_free: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_freeCopyTo: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_set1d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set2d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set3d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set4d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_get1d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_get2d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_get3d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_get4d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_desc: [THDescBuff, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_sizeDesc: [THDescBuff, [
    THFloatTensorPtr,
  ]],
  THDoubleTensor_storage: [THDoubleStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_storageOffset: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_nDimension: [ref.types.int32, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_size: [ref.types.long, [
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_stride: [ref.types.long, [
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_newSizeOf: [THLongStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newStrideOf: [THLongStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_data: [ref.refType(ref.types.double), [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_setFlag: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.char,
  ]],
  THDoubleTensor_clearFlag: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.char,
  ]],
  THDoubleTensor_new: [THDoubleTensorPtr, [
  ]],
  THDoubleTensor_newWithTensor: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newWithStorage: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_newWithStorage1d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage2d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage3d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage4d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize: [THDoubleTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_newWithSize1d: [THDoubleTensorPtr, [
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize2d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize3d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize4d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newClone: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newContiguous: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newSelect: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THDoubleTensor_newNarrow: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newTranspose: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_newUnfold: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_resizeAs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_resize1d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_resize2d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize3d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize4d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize5d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_set: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_setStorage: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_setStorage1d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage2d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage3d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage4d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_narrow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_select: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THDoubleTensor_transpose: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_unfold: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_squeeze: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_squeeze1d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_isContiguous: [ref.types.int32, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSameSizeAs: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSetTo: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSize: [ref.types.int32, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_nElement: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_retain: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_free: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_freeCopyTo: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_set1d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set2d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set3d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set4d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_get1d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_get2d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_get3d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_get4d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_desc: [THDescBuff, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sizeDesc: [THDescBuff, [
    THDoubleTensorPtr,
  ]],
  THByteTensor_copy: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_copyByte: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyChar: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyShort: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyInt: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyLong: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyFloat: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyDouble: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copy: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_copyByte: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyChar: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyShort: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyInt: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyLong: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyFloat: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyDouble: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copy: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_copyByte: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyChar: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyShort: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyInt: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyLong: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyFloat: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyDouble: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copy: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_copyByte: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyChar: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyShort: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyInt: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyLong: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyFloat: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyDouble: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copy: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_copyByte: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyChar: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyShort: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyInt: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyLong: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyFloat: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyDouble: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copy: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_copyByte: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyChar: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyShort: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyInt: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyLong: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyFloat: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyDouble: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copy: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_copyByte: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyChar: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyShort: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyInt: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyLong: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyFloat: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyDouble: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THByteTensor_random: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
  ]],
  THByteTensor_geometric: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THByteTensor_bernoulli: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THByteTensor_bernoulli_FloatTensor: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THByteTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THByteTensor_getRNGState: [ref.types.void, [
    THGeneratorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_setRNGState: [ref.types.void, [
    THGeneratorPtr,
    THByteTensorPtr,
  ]],
  THCharTensor_random: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
  ]],
  THCharTensor_geometric: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THCharTensor_bernoulli: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THCharTensor_bernoulli_FloatTensor: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THCharTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THShortTensor_random: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
  ]],
  THShortTensor_geometric: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THShortTensor_bernoulli: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THShortTensor_bernoulli_FloatTensor: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THShortTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THIntTensor_random: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
  ]],
  THIntTensor_geometric: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THIntTensor_bernoulli: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THIntTensor_bernoulli_FloatTensor: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THIntTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THLongTensor_random: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
  ]],
  THLongTensor_geometric: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THLongTensor_bernoulli: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THLongTensor_bernoulli_FloatTensor: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THLongTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THFloatTensor_random: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
  ]],
  THFloatTensor_geometric: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_bernoulli: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_bernoulli_FloatTensor: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THFloatTensor_uniform: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_normal: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_exponential: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_cauchy: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_logNormal: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_multinomial: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_random: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
  ]],
  THDoubleTensor_geometric: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_bernoulli: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_bernoulli_FloatTensor: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THDoubleTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_uniform: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_normal: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_exponential: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_cauchy: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_logNormal: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_multinomial: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_fill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_zero: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_maskedFill: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_maskedCopy: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_maskedSelect: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexSelect: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THByteTensor_indexCopy: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexAdd: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexFill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gather: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THByteTensor_scatter: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_scatterFill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_dot: [ref.types.long, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_minall: [ref.types.uchar, [
    THByteTensorPtr,
  ]],
  THByteTensor_maxall: [ref.types.uchar, [
    THByteTensorPtr,
  ]],
  THByteTensor_sumall: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_prodall: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_neg: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cinv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_add: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_sub: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_mul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_div: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_fmod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_remainder: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_clamp: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteTensor_cadd: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
  ]],
  THByteTensor_csub: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
  ]],
  THByteTensor_cmul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cpow: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cdiv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cfmod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cremainder: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addcmul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addcdiv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addr: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addbmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_baddbmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_match: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_numel: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_max: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_min: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_kthvalue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THByteTensor_mode: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_median: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_sum: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_prod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cumsum: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cumprod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_sign: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_trace: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_cross: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cmax: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cmin: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cmaxValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_cminValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_zeros: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_ones: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_diag: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_eye: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_range: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_randperm: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THByteTensor_reshape: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_sort: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_topk: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_tril: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_triu: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_cat: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_catArray: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_equal: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_ltValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_leValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gtValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_geValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_neValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_eqValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_ltTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_leTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_gtTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_geTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_neTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_eqTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_logicalall: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_logicalany: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THCharTensor_fill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_zero: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_maskedFill: [ref.types.void, [
    THCharTensorPtr,
    THByteTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_maskedCopy: [ref.types.void, [
    THCharTensorPtr,
    THByteTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_maskedSelect: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THByteTensorPtr,
  ]],
  THCharTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexSelect: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCharTensor_indexCopy: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexAdd: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexFill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gather: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCharTensor_scatter: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_scatterFill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_dot: [ref.types.long, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_minall: [ref.types.char, [
    THCharTensorPtr,
  ]],
  THCharTensor_maxall: [ref.types.char, [
    THCharTensorPtr,
  ]],
  THCharTensor_sumall: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_prodall: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_neg: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cinv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_add: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_sub: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_mul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_div: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_fmod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_remainder: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_clamp: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
  ]],
  THCharTensor_cadd: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
  ]],
  THCharTensor_csub: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
  ]],
  THCharTensor_cmul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cpow: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cdiv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cfmod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cremainder: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addcmul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addcdiv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addr: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addbmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_baddbmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_match: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_numel: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_max: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_min: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_kthvalue: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCharTensor_mode: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_median: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_sum: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_prod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cumsum: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cumprod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_sign: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_trace: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_cross: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cmax: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cmin: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cmaxValue: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_cminValue: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_zeros: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_ones: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_diag: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_eye: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_range: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_randperm: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THCharTensor_reshape: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_sort: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_topk: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_tril: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_triu: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_cat: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_catArray: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_equal: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_ltValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_leValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gtValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_geValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_neValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_eqValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_ltTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_leTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_gtTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_geTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_neTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_eqTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THShortTensor_fill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_zero: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_maskedFill: [ref.types.void, [
    THShortTensorPtr,
    THByteTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_maskedCopy: [ref.types.void, [
    THShortTensorPtr,
    THByteTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_maskedSelect: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THByteTensorPtr,
  ]],
  THShortTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexSelect: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THShortTensor_indexCopy: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexAdd: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexFill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gather: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THShortTensor_scatter: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_scatterFill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_dot: [ref.types.long, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_minall: [ref.types.short, [
    THShortTensorPtr,
  ]],
  THShortTensor_maxall: [ref.types.short, [
    THShortTensorPtr,
  ]],
  THShortTensor_sumall: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_prodall: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_neg: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cinv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_add: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_sub: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_mul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_div: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_fmod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_remainder: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_clamp: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
  ]],
  THShortTensor_cadd: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
  ]],
  THShortTensor_csub: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
  ]],
  THShortTensor_cmul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cpow: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cdiv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cfmod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cremainder: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addcmul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addcdiv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addr: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addbmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_baddbmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_match: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_numel: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_max: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_min: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_kthvalue: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THShortTensor_mode: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_median: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_sum: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_prod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cumsum: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cumprod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_sign: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_trace: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_cross: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cmax: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cmin: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cmaxValue: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_cminValue: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_zeros: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_ones: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_diag: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_eye: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_range: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_randperm: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THShortTensor_reshape: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_sort: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_topk: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_tril: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_triu: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_cat: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_catArray: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_equal: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_ltValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_leValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gtValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_geValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_neValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_eqValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_ltTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_leTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_gtTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_geTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_neTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_eqTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THIntTensor_fill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_zero: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_maskedFill: [ref.types.void, [
    THIntTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_maskedCopy: [ref.types.void, [
    THIntTensorPtr,
    THByteTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_maskedSelect: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THByteTensorPtr,
  ]],
  THIntTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexSelect: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THIntTensor_indexCopy: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexAdd: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexFill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gather: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THIntTensor_scatter: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_scatterFill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_dot: [ref.types.long, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_minall: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_maxall: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_sumall: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_prodall: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_neg: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cinv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_add: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sub: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_mul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_div: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_fmod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_remainder: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_clamp: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_cadd: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
  ]],
  THIntTensor_csub: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
  ]],
  THIntTensor_cmul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cpow: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cdiv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cfmod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cremainder: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addcmul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addcdiv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addr: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addbmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_baddbmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_match: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_numel: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_max: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_min: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_kthvalue: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_mode: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_median: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sum: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_prod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cumsum: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cumprod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sign: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_trace: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_cross: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cmax: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cmin: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cmaxValue: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cminValue: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_zeros: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_ones: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_diag: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eye: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_range: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_randperm: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THIntTensor_reshape: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_sort: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_topk: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_tril: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_triu: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_cat: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_catArray: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_equal: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_ltValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_leValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gtValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_geValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_neValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eqValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_ltTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_leTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_gtTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_geTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_neTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_eqTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_abs: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THLongTensor_fill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_zero: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_maskedFill: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_maskedCopy: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_maskedSelect: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THLongTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexSelect: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THLongTensor_indexCopy: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexAdd: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexFill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gather: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THLongTensor_scatter: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_scatterFill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_dot: [ref.types.long, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_minall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_maxall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_sumall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_prodall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_neg: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cinv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_add: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_sub: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_mul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_div: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_fmod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_remainder: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_clamp: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_cadd: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
  ]],
  THLongTensor_csub: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
  ]],
  THLongTensor_cmul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cpow: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cdiv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cfmod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cremainder: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addcmul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addcdiv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addr: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addbmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_baddbmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_match: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_numel: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_max: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_min: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_kthvalue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THLongTensor_mode: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_median: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_sum: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_prod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cumsum: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cumprod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_sign: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_trace: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_cross: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cmax: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cmin: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cmaxValue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_cminValue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_zeros: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_ones: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_diag: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_eye: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_range: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_randperm: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THLongTensor_reshape: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_sort: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_topk: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_tril: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_triu: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_cat: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_catArray: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_equal: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_ltValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_leValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gtValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_geValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_neValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_eqValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_ltTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_leTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_gtTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_geTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_neTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_eqTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_abs: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THFloatTensor_fill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_zero: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_maskedFill: [ref.types.void, [
    THFloatTensorPtr,
    THByteTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_maskedCopy: [ref.types.void, [
    THFloatTensorPtr,
    THByteTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_maskedSelect: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THByteTensorPtr,
  ]],
  THFloatTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexSelect: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THFloatTensor_indexCopy: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexAdd: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexFill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gather: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THFloatTensor_scatter: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_scatterFill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dot: [ref.types.double, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_minall: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_maxall: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_sumall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_prodall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_neg: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cinv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_add: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_sub: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_mul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_div: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_fmod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_remainder: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_clamp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatTensor_cadd: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_csub: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cpow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cdiv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cfmod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cremainder: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addcmul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addcdiv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addr: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addbmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_baddbmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_match: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_numel: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_max: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_min: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_kthvalue: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THFloatTensor_mode: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_median: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_sum: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_prod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cumsum: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cumprod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_sign: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trace: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_cross: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cmax: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmaxValue: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_cminValue: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_zeros: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_ones: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_diag: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_eye: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_range: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_randperm: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THFloatTensor_reshape: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_sort: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_topk: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_tril: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_triu: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_cat: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_catArray: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_equal: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_ltValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_leValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gtValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_geValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_neValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_eqValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ltTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_leTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_gtTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_neTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_eqTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sigmoid: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_log: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_log1p: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_exp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_acos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cosh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_asin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sinh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_tan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_atan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_atan2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_tanh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_pow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_tpow: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sqrt: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_rsqrt: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ceil: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_floor: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_round: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_abs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trunc: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_frac: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_lerp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_mean: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_std: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_var: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_norm: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.int32,
  ]],
  THFloatTensor_renorm: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.int32,
    ref.types.float,
  ]],
  THFloatTensor_dist: [ref.types.double, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_histc: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatTensor_meanall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_varall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_stdall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_normall: [ref.types.double, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_linspace: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    ref.types.long,
  ]],
  THFloatTensor_logspace: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    ref.types.long,
  ]],
  THFloatTensor_rand: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_randn: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_fill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_zero: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maskedFill: [ref.types.void, [
    THDoubleTensorPtr,
    THByteTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_maskedCopy: [ref.types.void, [
    THDoubleTensorPtr,
    THByteTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maskedSelect: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THByteTensorPtr,
  ]],
  THDoubleTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexSelect: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THDoubleTensor_indexCopy: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexAdd: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexFill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gather: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THDoubleTensor_scatter: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_scatterFill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dot: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_minall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maxall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sumall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_prodall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neg: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cinv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_add: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_sub: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_mul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_div: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_fmod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_remainder: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_clamp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_cadd: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_csub: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cpow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cdiv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cfmod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cremainder: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addcmul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addcdiv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addr: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addbmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_baddbmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_match: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_numel: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_max: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_min: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_kthvalue: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THDoubleTensor_mode: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_median: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_sum: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_prod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cumsum: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cumprod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_sign: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trace: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cross: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cmax: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmaxValue: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_cminValue: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_zeros: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_ones: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_diag: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_eye: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_range: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_randperm: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_reshape: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_sort: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_topk: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_tril: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_triu: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_cat: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_catArray: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_equal: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_ltValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_leValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gtValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_geValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_neValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_eqValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ltTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_leTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_gtTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_eqTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sigmoid: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_log: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_log1p: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_exp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_acos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cosh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_asin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sinh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_tan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_atan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_atan2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_tanh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_pow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_tpow: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sqrt: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_rsqrt: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ceil: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_floor: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_round: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_abs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trunc: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_frac: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_lerp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_mean: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_std: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_var: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_norm: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.int32,
  ]],
  THDoubleTensor_renorm: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.int32,
    ref.types.double,
  ]],
  THDoubleTensor_dist: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_histc: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_meanall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_varall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_stdall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_normall: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_linspace: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleTensor_logspace: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleTensor_rand: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_randn: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2DRevger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2DRevgerm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2Dger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dcmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv3DRevger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv3Dger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dcmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_validXCorr2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validConv2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullConv2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2DRevger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2DRevgerm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2Dger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dcmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_validXCorr3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validConv3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullConv3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv3DRevger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv3Dger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dcmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2DRevger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2DRevgerm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2Dger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dcmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv3DRevger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv3Dger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dcmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2DRevger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2DRevgerm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2Dger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dcmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv3DRevger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv3Dger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dcmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2DRevger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2DRevgerm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2Dger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dcmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv3DRevger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv3Dger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dcmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2DRevger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2DRevgerm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2Dger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dcmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv3DRevger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv3Dger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dcmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2DRevger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2DRevgerm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2Dger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dcmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv3DRevger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv3Dger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dcmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_gesv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trtrs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_gels: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_syev: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_geev: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_gesvd: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_gesvd2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_getri: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_potrf: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_potrs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_potri: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_qr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geqrf: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_orgqr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ormqr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_pstrf: [ref.types.void, [
    THFloatTensorPtr,
    THIntTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.float,
  ]],
  THDoubleTensor_gesv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trtrs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_gels: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_syev: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_geev: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_gesvd: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_gesvd2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_getri: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_potrf: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_potrs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_potri: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_qr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geqrf: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_orgqr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ormqr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_pstrf: [ref.types.void, [
    THDoubleTensorPtr,
    THIntTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.double,
  ]],
  THByteTensor_fctapply: [ref.types.void, [
    THByteTensorPtr,
    THByteTensor_jscallback,
  ]],
  THCharTensor_fctapply: [ref.types.void, [
    THCharTensorPtr,
    THCharTensor_jscallback,
  ]],
  THShortTensor_fctapply: [ref.types.void, [
    THShortTensorPtr,
    THShortTensor_jscallback,
  ]],
  THIntTensor_fctapply: [ref.types.void, [
    THIntTensorPtr,
    THIntTensor_jscallback,
  ]],
  THLongTensor_fctapply: [ref.types.void, [
    THLongTensorPtr,
    THLongTensor_jscallback,
  ]],
  THFloatTensor_fctapply: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensor_jscallback,
  ]],
  THFloatTensor_determinant: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_a2d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.float,
  ]],
  THFloatTensor_swap: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_dx_neg: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_add_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acc_add_f1: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_add_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acc_add_f2: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_sub_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acc_sub_f1: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_sub_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acc_sub_f2: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_mul_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_mul_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_mul_f1: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_mul_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_mul_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_mul_f2: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_div_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_div_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_div_f1: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_div_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_div_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_div_f2: [ref.types.float, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_sqrt: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_exp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_log: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_pow_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_pow_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_pow_f1: [ref.types.float, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_pow_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_pow_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_pow_f2: [ref.types.float, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_sin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_cos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_tan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_asin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_atan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_atan2_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_atan2_f1: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_atan2_f1: [ref.types.float, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_atan2_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_const_atan2_f2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_acc_atan2_f2: [ref.types.float, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dx_sinh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_cosh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_tanh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_asinh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_acosh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_atanh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_dx_sigmoid: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THDoubleTensor_fctapply: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensor_jscallback,
  ]],
  THDoubleTensor_determinant: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_a2d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.double,
  ]],
  THDoubleTensor_swap: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_dx_neg: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_add_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acc_add_f1: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_add_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acc_add_f2: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_sub_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acc_sub_f1: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_sub_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acc_sub_f2: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_mul_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_mul_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_mul_f1: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_mul_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_mul_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_mul_f2: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_div_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_div_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_div_f1: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_div_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_div_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_div_f2: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_sqrt: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_exp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_log: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_pow_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_pow_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_pow_f1: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_pow_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_pow_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_pow_f2: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_sin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_cos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_tan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_asin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_atan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_atan2_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_atan2_f1: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_atan2_f1: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_atan2_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_const_atan2_f2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_acc_atan2_f2: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dx_sinh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_cosh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_tanh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_asinh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_acosh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_atanh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_dx_sigmoid: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THFile_isOpened: [ref.types.int32, [
    THFile,
  ]],
  THFile_isQuiet: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_isReadable: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_isWritable: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_isBinary: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_isAutoSpacing: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_hasError: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_binary: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_ascii: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_autoSpacing: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_noAutoSpacing: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_quiet: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_pedantic: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_clearError: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_readByteScalar: [ref.types.uchar, [
    THFilePtr,
  ]],
  THFile_readCharScalar: [ref.types.char, [
    THFilePtr,
  ]],
  THFile_readShortScalar: [ref.types.short, [
    THFilePtr,
  ]],
  THFile_readIntScalar: [ref.types.int32, [
    THFilePtr,
  ]],
  THFile_readLongScalar: [ref.types.long, [
    THFilePtr,
  ]],
  THFile_readFloatScalar: [ref.types.float, [
    THFilePtr,
  ]],
  THFile_readDoubleScalar: [ref.types.double, [
    THFilePtr,
  ]],
  THFile_writeByteScalar: [ref.types.void, [
    THFilePtr,
    ref.types.uchar,
  ]],
  THFile_writeCharScalar: [ref.types.void, [
    THFilePtr,
    ref.types.char,
  ]],
  THFile_writeShortScalar: [ref.types.void, [
    THFilePtr,
    ref.types.short,
  ]],
  THFile_writeIntScalar: [ref.types.void, [
    THFilePtr,
    ref.types.int32,
  ]],
  THFile_writeLongScalar: [ref.types.void, [
    THFilePtr,
    ref.types.long,
  ]],
  THFile_writeFloatScalar: [ref.types.void, [
    THFilePtr,
    ref.types.float,
  ]],
  THFile_writeDoubleScalar: [ref.types.void, [
    THFilePtr,
    ref.types.double,
  ]],
  THFile_readByte: [ref.types.ulong, [
    THFilePtr,
    THByteStoragePtr,
  ]],
  THFile_readChar: [ref.types.ulong, [
    THFilePtr,
    THCharStoragePtr,
  ]],
  THFile_readShort: [ref.types.ulong, [
    THFilePtr,
    THShortStoragePtr,
  ]],
  THFile_readInt: [ref.types.ulong, [
    THFilePtr,
    THIntStoragePtr,
  ]],
  THFile_readLong: [ref.types.ulong, [
    THFilePtr,
    THLongStoragePtr,
  ]],
  THFile_readFloat: [ref.types.ulong, [
    THFilePtr,
    THFloatStoragePtr,
  ]],
  THFile_readDouble: [ref.types.ulong, [
    THFilePtr,
    THDoubleStoragePtr,
  ]],
  THFile_writeByte: [ref.types.ulong, [
    THFilePtr,
    THByteStoragePtr,
  ]],
  THFile_writeChar: [ref.types.ulong, [
    THFilePtr,
    THCharStoragePtr,
  ]],
  THFile_writeShort: [ref.types.ulong, [
    THFilePtr,
    THShortStoragePtr,
  ]],
  THFile_writeInt: [ref.types.ulong, [
    THFilePtr,
    THIntStoragePtr,
  ]],
  THFile_writeLong: [ref.types.ulong, [
    THFilePtr,
    THLongStoragePtr,
  ]],
  THFile_writeFloat: [ref.types.ulong, [
    THFilePtr,
    THFloatStoragePtr,
  ]],
  THFile_writeDouble: [ref.types.ulong, [
    THFilePtr,
    THDoubleStoragePtr,
  ]],
  THFile_readByteRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.uchar),
    ref.types.ulong,
  ]],
  THFile_readCharRaw: [ref.types.ulong, [
    THFilePtr,
    ref.types.CString,
    ref.types.ulong,
  ]],
  THFile_readShortRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.short),
    ref.types.ulong,
  ]],
  THFile_readIntRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.int32),
    ref.types.ulong,
  ]],
  THFile_readLongRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.long),
    ref.types.ulong,
  ]],
  THFile_readFloatRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.float),
    ref.types.ulong,
  ]],
  THFile_readDoubleRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.double),
    ref.types.ulong,
  ]],
  THFile_readStringRaw: [ref.types.ulong, [
    THFilePtr,
    ref.types.CString,
    voidPtr,
  ]],
  THFile_writeByteRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.uchar),
    ref.types.ulong,
  ]],
  THFile_writeCharRaw: [ref.types.ulong, [
    THFilePtr,
    ref.types.CString,
    ref.types.ulong,
  ]],
  THFile_writeShortRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.short),
    ref.types.ulong,
  ]],
  THFile_writeIntRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.int32),
    ref.types.ulong,
  ]],
  THFile_writeLongRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.long),
    ref.types.ulong,
  ]],
  THFile_writeFloatRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.float),
    ref.types.ulong,
  ]],
  THFile_writeDoubleRaw: [ref.types.ulong, [
    THFilePtr,
    ref.refType(ref.types.double),
    ref.types.ulong,
  ]],
  THFile_writeStringRaw: [ref.types.ulong, [
    THFilePtr,
    ref.types.CString,
    ref.types.ulong,
  ]],
  THFile_synchronize: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_seek: [ref.types.void, [
    THFilePtr,
    ref.types.ulong,
  ]],
  THFile_seekEnd: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_position: [ref.types.ulong, [
    THFilePtr,
  ]],
  THFile_close: [ref.types.void, [
    THFilePtr,
  ]],
  THFile_free: [ref.types.void, [
    THFilePtr,
  ]],
  THDiskFile_new: [THFilePtr, [
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
  ]],
  THPipeFile_new: [THFilePtr, [
    ref.types.CString,
    ref.types.CString,
    ref.types.int32,
  ]],
  THDiskFile_name: [ref.types.CString, [
    THFilePtr,
  ]],
  THDiskFile_isLittleEndianCPU: [ref.types.int32, [
  ]],
  THDiskFile_isBigEndianCPU: [ref.types.int32, [
  ]],
  THDiskFile_nativeEndianEncoding: [ref.types.void, [
    THFilePtr,
  ]],
  THDiskFile_littleEndianEncoding: [ref.types.void, [
    THFilePtr,
  ]],
  THDiskFile_bigEndianEncoding: [ref.types.void, [
    THFilePtr,
  ]],
  THDiskFile_longSize: [ref.types.void, [
    THFilePtr,
    ref.types.int32,
  ]],
  THDiskFile_noBuffer: [ref.types.void, [
    THFilePtr,
  ]],
  THMemoryFile_newWithStorage: [THFilePtr, [
    THCharStoragePtr,
    ref.types.CString,
  ]],
  THMemoryFile_new: [THFilePtr, [
    ref.types.CString,
  ]],
  THMemoryFile_storage: [THCharStoragePtr, [
    THFilePtr,
  ]],
  THMemoryFile_longSize: [ref.types.void, [
    THFilePtr,
    ref.types.int32,
  ]],
});

