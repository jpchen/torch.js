var libclang = require('./libclang');

var
  Cursor = libclang.Cursor,
  Index = libclang.Index,
  TranslationUnit = libclang.TranslationUnit;

var dclang = require('./lib/dynamic_clang');
var consts = dclang.CONSTANTS;

var index = new Index(true, true);
var tu = new TranslationUnit.fromSource(index, '/Users/tjfontaine/Development/node/src/node_buffer.h', [
  '-xc++',
  //'-I/Users/tjfontaine/Development/node/deps/uv/include',
  //'-I/Users/tjfontaine/Development/node/deps/v8/include',
]);


tu.cursor.visitChildren(function (parent) {
  if (this.kind != Cursor.MacroDefinition &&
      this.kind != Cursor.MacroInstantiation &&
      this.kind != Cursor.LastProcessing)
    console.log(consts.CXCursorKind[this.kind], this.spelling);
  switch (this.kind) {
    case Cursor.LastPreprocessing:
      return Cursor.Break;
      break;
    case Cursor.Namespace:
    case Cursor.ClassDecl:
    case Cursor.FunctionDecl:
    case Cursor.FunctionTemplate:
    case Cursor.EnumDecl:
      return Cursor.Recurse;
      break;
    default:
      return Cursor.Continue;
      break;
  }
});
