var FFI = require('ffi'),
    ArrayType = require('ref-array'),
    Struct = require('ref-struct'),
    ref = require('ref');

var voidPtr = ref.refType(ref.types.void);

exports.CONSTANTS = {
  'cudaError': {
      cudaSuccess: 0,
      cudaErrorMissingConfiguration: 1,
      cudaErrorMemoryAllocation: 2,
      cudaErrorInitializationError: 3,
      cudaErrorLaunchFailure: 4,
      cudaErrorPriorLaunchFailure: 5,
      cudaErrorLaunchTimeout: 6,
      cudaErrorLaunchOutOfResources: 7,
      cudaErrorInvalidDeviceFunction: 8,
      cudaErrorInvalidConfiguration: 9,
      cudaErrorInvalidDevice: 10,
      cudaErrorInvalidValue: 11,
      cudaErrorInvalidPitchValue: 12,
      cudaErrorInvalidSymbol: 13,
      cudaErrorMapBufferObjectFailed: 14,
      cudaErrorUnmapBufferObjectFailed: 15,
      cudaErrorInvalidHostPointer: 16,
      cudaErrorInvalidDevicePointer: 17,
      cudaErrorInvalidTexture: 18,
      cudaErrorInvalidTextureBinding: 19,
      cudaErrorInvalidChannelDescriptor: 20,
      cudaErrorInvalidMemcpyDirection: 21,
      cudaErrorAddressOfConstant: 22,
      cudaErrorTextureFetchFailed: 23,
      cudaErrorTextureNotBound: 24,
      cudaErrorSynchronizationError: 25,
      cudaErrorInvalidFilterSetting: 26,
      cudaErrorInvalidNormSetting: 27,
      cudaErrorMixedDeviceExecution: 28,
      cudaErrorCudartUnloading: 29,
      cudaErrorUnknown: 30,
      cudaErrorNotYetImplemented: 31,
      cudaErrorMemoryValueTooLarge: 32,
      cudaErrorInvalidResourceHandle: 33,
      cudaErrorNotReady: 34,
      cudaErrorInsufficientDriver: 35,
      cudaErrorSetOnActiveProcess: 36,
      cudaErrorInvalidSurface: 37,
      cudaErrorNoDevice: 38,
      cudaErrorECCUncorrectable: 39,
      cudaErrorSharedObjectSymbolNotFound: 40,
      cudaErrorSharedObjectInitFailed: 41,
      cudaErrorUnsupportedLimit: 42,
      cudaErrorDuplicateVariableName: 43,
      cudaErrorDuplicateTextureName: 44,
      cudaErrorDuplicateSurfaceName: 45,
      cudaErrorDevicesUnavailable: 46,
      cudaErrorInvalidKernelImage: 47,
      cudaErrorNoKernelImageForDevice: 48,
      cudaErrorIncompatibleDriverContext: 49,
      cudaErrorPeerAccessAlreadyEnabled: 50,
      cudaErrorPeerAccessNotEnabled: 51,
      cudaErrorDeviceAlreadyInUse: 54,
      cudaErrorProfilerDisabled: 55,
      cudaErrorProfilerNotInitialized: 56,
      cudaErrorProfilerAlreadyStarted: 57,
      cudaErrorProfilerAlreadyStopped: 58,
      cudaErrorAssert: 59,
      cudaErrorTooManyPeers: 60,
      cudaErrorHostMemoryAlreadyRegistered: 61,
      cudaErrorHostMemoryNotRegistered: 62,
      cudaErrorOperatingSystem: 63,
      cudaErrorPeerAccessUnsupported: 64,
      cudaErrorLaunchMaxDepthExceeded: 65,
      cudaErrorLaunchFileScopedTex: 66,
      cudaErrorLaunchFileScopedSurf: 67,
      cudaErrorSyncDepthExceeded: 68,
      cudaErrorLaunchPendingCountExceeded: 69,
      cudaErrorNotPermitted: 70,
      cudaErrorNotSupported: 71,
      cudaErrorHardwareStackError: 72,
      cudaErrorIllegalInstruction: 73,
      cudaErrorMisalignedAddress: 74,
      cudaErrorInvalidAddressSpace: 75,
      cudaErrorInvalidPc: 76,
      cudaErrorIllegalAddress: 77,
      cudaErrorInvalidPtx: 78,
      cudaErrorInvalidGraphicsContext: 79,
      cudaErrorStartupFailure: 127,
      cudaErrorApiFailureBase: 10000,
      '0': 'cudaSuccess',
      '1': 'cudaErrorMissingConfiguration',
      '2': 'cudaErrorMemoryAllocation',
      '3': 'cudaErrorInitializationError',
      '4': 'cudaErrorLaunchFailure',
      '5': 'cudaErrorPriorLaunchFailure',
      '6': 'cudaErrorLaunchTimeout',
      '7': 'cudaErrorLaunchOutOfResources',
      '8': 'cudaErrorInvalidDeviceFunction',
      '9': 'cudaErrorInvalidConfiguration',
      '10': 'cudaErrorInvalidDevice',
      '11': 'cudaErrorInvalidValue',
      '12': 'cudaErrorInvalidPitchValue',
      '13': 'cudaErrorInvalidSymbol',
      '14': 'cudaErrorMapBufferObjectFailed',
      '15': 'cudaErrorUnmapBufferObjectFailed',
      '16': 'cudaErrorInvalidHostPointer',
      '17': 'cudaErrorInvalidDevicePointer',
      '18': 'cudaErrorInvalidTexture',
      '19': 'cudaErrorInvalidTextureBinding',
      '20': 'cudaErrorInvalidChannelDescriptor',
      '21': 'cudaErrorInvalidMemcpyDirection',
      '22': 'cudaErrorAddressOfConstant',
      '23': 'cudaErrorTextureFetchFailed',
      '24': 'cudaErrorTextureNotBound',
      '25': 'cudaErrorSynchronizationError',
      '26': 'cudaErrorInvalidFilterSetting',
      '27': 'cudaErrorInvalidNormSetting',
      '28': 'cudaErrorMixedDeviceExecution',
      '29': 'cudaErrorCudartUnloading',
      '30': 'cudaErrorUnknown',
      '31': 'cudaErrorNotYetImplemented',
      '32': 'cudaErrorMemoryValueTooLarge',
      '33': 'cudaErrorInvalidResourceHandle',
      '34': 'cudaErrorNotReady',
      '35': 'cudaErrorInsufficientDriver',
      '36': 'cudaErrorSetOnActiveProcess',
      '37': 'cudaErrorInvalidSurface',
      '38': 'cudaErrorNoDevice',
      '39': 'cudaErrorECCUncorrectable',
      '40': 'cudaErrorSharedObjectSymbolNotFound',
      '41': 'cudaErrorSharedObjectInitFailed',
      '42': 'cudaErrorUnsupportedLimit',
      '43': 'cudaErrorDuplicateVariableName',
      '44': 'cudaErrorDuplicateTextureName',
      '45': 'cudaErrorDuplicateSurfaceName',
      '46': 'cudaErrorDevicesUnavailable',
      '47': 'cudaErrorInvalidKernelImage',
      '48': 'cudaErrorNoKernelImageForDevice',
      '49': 'cudaErrorIncompatibleDriverContext',
      '50': 'cudaErrorPeerAccessAlreadyEnabled',
      '51': 'cudaErrorPeerAccessNotEnabled',
      '54': 'cudaErrorDeviceAlreadyInUse',
      '55': 'cudaErrorProfilerDisabled',
      '56': 'cudaErrorProfilerNotInitialized',
      '57': 'cudaErrorProfilerAlreadyStarted',
      '58': 'cudaErrorProfilerAlreadyStopped',
      '59': 'cudaErrorAssert',
      '60': 'cudaErrorTooManyPeers',
      '61': 'cudaErrorHostMemoryAlreadyRegistered',
      '62': 'cudaErrorHostMemoryNotRegistered',
      '63': 'cudaErrorOperatingSystem',
      '64': 'cudaErrorPeerAccessUnsupported',
      '65': 'cudaErrorLaunchMaxDepthExceeded',
      '66': 'cudaErrorLaunchFileScopedTex',
      '67': 'cudaErrorLaunchFileScopedSurf',
      '68': 'cudaErrorSyncDepthExceeded',
      '69': 'cudaErrorLaunchPendingCountExceeded',
      '70': 'cudaErrorNotPermitted',
      '71': 'cudaErrorNotSupported',
      '72': 'cudaErrorHardwareStackError',
      '73': 'cudaErrorIllegalInstruction',
      '74': 'cudaErrorMisalignedAddress',
      '75': 'cudaErrorInvalidAddressSpace',
      '76': 'cudaErrorInvalidPc',
      '77': 'cudaErrorIllegalAddress',
      '78': 'cudaErrorInvalidPtx',
      '79': 'cudaErrorInvalidGraphicsContext',
      '127': 'cudaErrorStartupFailure',
      '10000': 'cudaErrorApiFailureBase',
  },
};

var THMapAllocatorContext = exports.THMapAllocatorContext = voidPtr;
var THMapAllocatorContextPtr = exports.THMapAllocatorContextPtr = ref.refType(THMapAllocatorContext);
var cudaStream_t = exports.cudaStream_t = voidPtr;
var cudaStream_tPtr = exports.cudaStream_tPtr = ref.refType(cudaStream_t);
var cublasHandle_t = exports.cublasHandle_t = voidPtr;
var cublasHandle_tPtr = exports.cublasHandle_tPtr = ref.refType(cublasHandle_t);
var THCCudaResourcesPerDevice = exports.THCCudaResourcesPerDevice = Struct({
  streams: cudaStream_tPtr,
  blasHandles: cublasHandle_tPtr,
  scratchSpacePerStream: ref.types.ulong,
  devScratchSpacePerStream: voidPtr,
});
var THCCudaResourcesPerDevicePtr = exports.THCCudaResourcesPerDevicePtr = ref.refType(THCCudaResourcesPerDevice);
var THAllocator = exports.THAllocator = Struct({
  malloc: voidPtr,
  realloc: voidPtr,
  free: voidPtr,
});
var THAllocatorPtr = exports.THAllocatorPtr = ref.refType(THAllocator);
var THCState = exports.THCState = Struct({
  rngState: voidPtr,
  deviceProperties: voidPtr,
  currentStream: cudaStream_t,
  currentBlasHandle: cublasHandle_t,
  resourcesPerDevice: THCCudaResourcesPerDevicePtr,
  numDevices: ref.types.int32,
  numUserStreams: ref.types.int32,
  numUserBlasHandles: ref.types.int32,
  currentPerDeviceStream: ref.types.int32,
  currentPerDeviceBlasHandle: ref.types.int32,
  cudaHostAllocator: THAllocatorPtr,
  p2pAccessEnabled: voidPtr,
  p2pKernelAccessEnabled: ref.types.int32,
  cutorchGCFunction: voidPtr,
  cutorchGCData: voidPtr,
  heapSoftmax: ref.types.long,
  heapDelta: ref.types.long,
});
var THCStatePtr = exports.THCStatePtr = ref.refType(THCState);
var half = exports.half = voidPtr;
var halfPtr = exports.halfPtr = ref.refType(half);
var THByteStorage = exports.THByteStorage = Struct({
  data: ref.refType(ref.types.uchar),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THByteStoragePtr = exports.THByteStoragePtr = ref.refType(THByteStorage);
var THCharStorage = exports.THCharStorage = Struct({
  data: ref.types.CString,
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCharStoragePtr = exports.THCharStoragePtr = ref.refType(THCharStorage);
var THShortStorage = exports.THShortStorage = Struct({
  data: ref.refType(ref.types.short),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THShortStoragePtr = exports.THShortStoragePtr = ref.refType(THShortStorage);
var THIntStorage = exports.THIntStorage = Struct({
  data: ref.refType(ref.types.int32),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THIntStoragePtr = exports.THIntStoragePtr = ref.refType(THIntStorage);
var THLongStorage = exports.THLongStorage = Struct({
  data: ref.refType(ref.types.long),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THLongStoragePtr = exports.THLongStoragePtr = ref.refType(THLongStorage);
var THFloatStorage = exports.THFloatStorage = Struct({
  data: ref.refType(ref.types.float),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THFloatStoragePtr = exports.THFloatStoragePtr = ref.refType(THFloatStorage);
var THDoubleStorage = exports.THDoubleStorage = Struct({
  data: ref.refType(ref.types.double),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THDoubleStoragePtr = exports.THDoubleStoragePtr = ref.refType(THDoubleStorage);
var THCudaByteStorage = exports.THCudaByteStorage = Struct({
  data: ref.refType(ref.types.uchar),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaByteStoragePtr = exports.THCudaByteStoragePtr = ref.refType(THCudaByteStorage);
var THCudaCharStorage = exports.THCudaCharStorage = Struct({
  data: ref.types.CString,
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaCharStoragePtr = exports.THCudaCharStoragePtr = ref.refType(THCudaCharStorage);
var THCudaShortStorage = exports.THCudaShortStorage = Struct({
  data: ref.refType(ref.types.short),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaShortStoragePtr = exports.THCudaShortStoragePtr = ref.refType(THCudaShortStorage);
var THCudaIntStorage = exports.THCudaIntStorage = Struct({
  data: ref.refType(ref.types.int32),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaIntStoragePtr = exports.THCudaIntStoragePtr = ref.refType(THCudaIntStorage);
var THCudaLongStorage = exports.THCudaLongStorage = Struct({
  data: ref.refType(ref.types.long),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaLongStoragePtr = exports.THCudaLongStoragePtr = ref.refType(THCudaLongStorage);
var THCudaHalfStorage = exports.THCudaHalfStorage = Struct({
  data: halfPtr,
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaHalfStoragePtr = exports.THCudaHalfStoragePtr = ref.refType(THCudaHalfStorage);
var THCudaStorage = exports.THCudaStorage = Struct({
  data: ref.refType(ref.types.float),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaStoragePtr = exports.THCudaStoragePtr = ref.refType(THCudaStorage);
var THCudaDoubleStorage = exports.THCudaDoubleStorage = Struct({
  data: ref.refType(ref.types.double),
  size: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
  allocator: THAllocatorPtr,
  allocatorContext: voidPtr,
  view: voidPtr,
});
var THCudaDoubleStoragePtr = exports.THCudaDoubleStoragePtr = ref.refType(THCudaDoubleStorage);
var THByteTensor = exports.THByteTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THByteStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THByteTensorPtr = exports.THByteTensorPtr = ref.refType(THByteTensor);
var THDescBuff = exports.THDescBuff = Struct({
  str: ArrayType(ref.types.char, 64),
});
var THDescBuffPtr = exports.THDescBuffPtr = ref.refType(THDescBuff);
var THCharTensor = exports.THCharTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCharStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCharTensorPtr = exports.THCharTensorPtr = ref.refType(THCharTensor);
var THShortTensor = exports.THShortTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THShortStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THShortTensorPtr = exports.THShortTensorPtr = ref.refType(THShortTensor);
var THIntTensor = exports.THIntTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THIntStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THIntTensorPtr = exports.THIntTensorPtr = ref.refType(THIntTensor);
var THLongTensor = exports.THLongTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THLongStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THLongTensorPtr = exports.THLongTensorPtr = ref.refType(THLongTensor);
var THFloatTensor = exports.THFloatTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THFloatStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THFloatTensorPtr = exports.THFloatTensorPtr = ref.refType(THFloatTensor);
var THDoubleTensor = exports.THDoubleTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THDoubleStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THDoubleTensorPtr = exports.THDoubleTensorPtr = ref.refType(THDoubleTensor);
var THGenerator = exports.THGenerator = Struct({
  the_initial_seed: ref.types.ulong,
  left: ref.types.int32,
  seeded: ref.types.int32,
  next: ref.types.ulong,
  state: ArrayType(ref.types.ulong, 624),
  normal_x: ref.types.double,
  normal_y: ref.types.double,
  normal_rho: ref.types.double,
  normal_is_valid: ref.types.int32,
});
var THGeneratorPtr = exports.THGeneratorPtr = ref.refType(THGenerator);
var THCudaByteTensor = exports.THCudaByteTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaByteStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaByteTensorPtr = exports.THCudaByteTensorPtr = ref.refType(THCudaByteTensor);
var THCudaCharTensor = exports.THCudaCharTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaCharStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaCharTensorPtr = exports.THCudaCharTensorPtr = ref.refType(THCudaCharTensor);
var THCudaShortTensor = exports.THCudaShortTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaShortStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaShortTensorPtr = exports.THCudaShortTensorPtr = ref.refType(THCudaShortTensor);
var THCudaIntTensor = exports.THCudaIntTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaIntStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaIntTensorPtr = exports.THCudaIntTensorPtr = ref.refType(THCudaIntTensor);
var THCudaLongTensor = exports.THCudaLongTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaLongStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaLongTensorPtr = exports.THCudaLongTensorPtr = ref.refType(THCudaLongTensor);
var THCudaHalfTensor = exports.THCudaHalfTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaHalfStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaHalfTensorPtr = exports.THCudaHalfTensorPtr = ref.refType(THCudaHalfTensor);
var THCudaTensor = exports.THCudaTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaTensorPtr = exports.THCudaTensorPtr = ref.refType(THCudaTensor);
var THCudaDoubleTensor = exports.THCudaDoubleTensor = Struct({
  size: ref.refType(ref.types.long),
  stride: ref.refType(ref.types.long),
  nDimension: ref.types.int32,
  storage: THCudaDoubleStoragePtr,
  storageOffset: ref.types.long,
  refcount: ref.types.int32,
  flag: ref.types.char,
});
var THCudaDoubleTensorPtr = exports.THCudaDoubleTensorPtr = ref.refType(THCudaDoubleTensor);

exports.THC = new FFI.Library('./cuthlib/build/libmTHC', {
  THLog1p: [ref.types.double, [
    ref.types.double,
  ]],
  THSetErrorHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THSetArgErrorHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THAlloc: [voidPtr, [
    ref.types.long,
  ]],
  THRealloc: [voidPtr, [
    voidPtr,
    ref.types.long,
  ]],
  THFree: [ref.types.void, [
    voidPtr,
  ]],
  THSetGCHandler: [ref.types.void, [
    voidPtr,
    voidPtr,
  ]],
  THHeapUpdate: [ref.types.void, [
    ref.types.long,
  ]],
  THMapAllocatorContext_new: [THMapAllocatorContext, [
    ref.types.CString,
    ref.types.int32,
  ]],
  THMapAllocatorContext_newWithFd: [THMapAllocatorContextPtr, [
    ref.types.CString,
    ref.types.int32,
    ref.types.int32,
  ]],
  THMapAllocatorContext_filename: [ref.types.CString, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_fd: [ref.types.int32, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_size: [ref.types.long, [
    THMapAllocatorContextPtr,
  ]],
  THMapAllocatorContext_free: [ref.types.void, [
    THMapAllocatorContextPtr,
  ]],
  THRefcountedMapAllocator_incref: [ref.types.void, [
    THMapAllocatorContextPtr,
    voidPtr,
  ]],
  THRefcountedMapAllocator_decref: [ref.types.int32, [
    THMapAllocatorContextPtr,
    voidPtr,
  ]],
  THCudaInit: [ref.types.void, [
    THCStatePtr,
  ]],
  THCudaShutdown: [ref.types.void, [
    THCStatePtr,
  ]],
  THCudaEnablePeerToPeerAccess: [ref.types.void, [
    THCStatePtr,
  ]],
  THCState_getPeerToPeerAccess: [ref.types.int32, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_setPeerToPeerAccess: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_getKernelPeerToPeerAccessEnabled: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_setKernelPeerToPeerAccessEnabled: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCState_getCurrentDeviceProperties: [voidPtr, [
    THCStatePtr,
  ]],
  THCMagma_init: [ref.types.void, [
    THCStatePtr,
  ]],
  THCState_getNumDevices: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_reserveStreams: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_getNumStreams: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_getDeviceStream: [cudaStream_t, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_getCurrentStream: [cudaStream_t, [
    THCStatePtr,
  ]],
  THCState_getCurrentStreamIndex: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_setStream: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_setStreamForCurrentDevice: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCState_reserveBlasHandles: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCState_getNumBlasHandles: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_getDeviceBlasHandle: [cublasHandle_t, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_getCurrentBlasHandle: [cublasHandle_t, [
    THCStatePtr,
  ]],
  THCState_getCurrentBlasHandleIndex: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCState_setBlasHandle: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_setBlasHandleForCurrentDevice: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCState_getCurrentDeviceScratchSpace: [voidPtr, [
    THCStatePtr,
  ]],
  THCState_getDeviceScratchSpace: [voidPtr, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCState_getCurrentDeviceScratchSpaceSize: [ref.types.ulong, [
    THCStatePtr,
  ]],
  THCState_getDeviceScratchSpaceSize: [ref.types.ulong, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCudaMalloc: [ref.types.uint32, [
    THCStatePtr,
    voidPtr,
    ref.types.ulong,
  ]],
  THCudaFree: [ref.types.uint32, [
    THCStatePtr,
    voidPtr,
  ]],
  THCSetGCHandler: [ref.types.void, [
    THCStatePtr,
    voidPtr,
    voidPtr,
  ]],
  THCHeapUpdate: [ref.types.void, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCAllocator_init: [ref.types.void, [
    THCStatePtr,
  ]],
  THCAllocator_shutdown: [ref.types.void, [
    THCStatePtr,
  ]],
  THCFloat2Half: [ref.types.void, [
    THCStatePtr,
    half,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCHalf2Float: [ref.types.void, [
    THCStatePtr,
    ref.refType(ref.types.float),
    halfPtr,
    ref.types.long,
  ]],
  THC_float2half: [half, [
    ref.types.float,
  ]],
  THC_half2float: [ref.types.float, [
    half,
  ]],
  THC_nativeHalfInstructions: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaBlas_Sdot: [ref.types.float, [
    THCStatePtr,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCudaBlas_Ddot: [ref.types.double, [
    THCStatePtr,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THCudaBlas_Sgemv: [ref.types.void, [
    THCStatePtr,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCudaBlas_Dgemv: [ref.types.void, [
    THCStatePtr,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THCudaBlas_Sger: [ref.types.void, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCudaBlas_Dger: [ref.types.void, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THCudaBlas_Sgemm: [ref.types.void, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCudaBlas_Dgemm: [ref.types.void, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THCudaBlas_Hgemm: [ref.types.void, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    half,
    halfPtr,
    ref.types.long,
    halfPtr,
    ref.types.long,
    half,
    halfPtr,
    ref.types.long,
  ]],
  THCudaBlas_Sgetrf: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THCudaBlas_Dgetrf: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THCudaBlas_Sgetri: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THCudaBlas_Dgetri: [ref.types.void, [
    THCStatePtr,
    ref.types.int32,
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    voidPtr,
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.int32,
  ]],
  THByteStorage_data: [ref.refType(ref.types.uchar), [
    THByteStoragePtr,
  ]],
  THByteStorage_size: [ref.types.long, [
    THByteStoragePtr,
  ]],
  THByteStorage_elementSize: [ref.types.int32, [
  ]],
  THByteStorage_set: [ref.types.void, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteStorage_get: [ref.types.uchar, [
    THByteStoragePtr,
    ref.types.long,
  ]],
  THByteStorage_new: [THByteStoragePtr, [
  ]],
  THByteStorage_newWithSize: [THByteStoragePtr, [
    ref.types.long,
  ]],
  THByteStorage_newWithSize1: [THByteStoragePtr, [
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize2: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize3: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithSize4: [THByteStoragePtr, [
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteStorage_newWithMapping: [THByteStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THByteStorage_newWithData: [THByteStoragePtr, [
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THByteStorage_newWithAllocator: [THByteStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THByteStorage_newWithDataAndAllocator: [THByteStoragePtr, [
    ref.refType(ref.types.uchar),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THByteStorage_setFlag: [ref.types.void, [
    THByteStoragePtr,
    ref.types.char,
  ]],
  THByteStorage_clearFlag: [ref.types.void, [
    THByteStoragePtr,
    ref.types.char,
  ]],
  THByteStorage_retain: [ref.types.void, [
    THByteStoragePtr,
  ]],
  THByteStorage_swap: [ref.types.void, [
    THByteStoragePtr,
    THByteStoragePtr,
  ]],
  THByteStorage_free: [ref.types.void, [
    THByteStoragePtr,
  ]],
  THByteStorage_resize: [ref.types.void, [
    THByteStoragePtr,
    ref.types.long,
  ]],
  THByteStorage_fill: [ref.types.void, [
    THByteStoragePtr,
    ref.types.uchar,
  ]],
  THCharStorage_data: [ref.types.CString, [
    THCharStoragePtr,
  ]],
  THCharStorage_size: [ref.types.long, [
    THCharStoragePtr,
  ]],
  THCharStorage_elementSize: [ref.types.int32, [
  ]],
  THCharStorage_set: [ref.types.void, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCharStorage_get: [ref.types.char, [
    THCharStoragePtr,
    ref.types.long,
  ]],
  THCharStorage_new: [THCharStoragePtr, [
  ]],
  THCharStorage_newWithSize: [THCharStoragePtr, [
    ref.types.long,
  ]],
  THCharStorage_newWithSize1: [THCharStoragePtr, [
    ref.types.char,
  ]],
  THCharStorage_newWithSize2: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithSize3: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithSize4: [THCharStoragePtr, [
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCharStorage_newWithMapping: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCharStorage_newWithData: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
  ]],
  THCharStorage_newWithAllocator: [THCharStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCharStorage_newWithDataAndAllocator: [THCharStoragePtr, [
    ref.types.CString,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCharStorage_setFlag: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THCharStorage_clearFlag: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THCharStorage_retain: [ref.types.void, [
    THCharStoragePtr,
  ]],
  THCharStorage_swap: [ref.types.void, [
    THCharStoragePtr,
    THCharStoragePtr,
  ]],
  THCharStorage_free: [ref.types.void, [
    THCharStoragePtr,
  ]],
  THCharStorage_resize: [ref.types.void, [
    THCharStoragePtr,
    ref.types.long,
  ]],
  THCharStorage_fill: [ref.types.void, [
    THCharStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_data: [ref.refType(ref.types.short), [
    THShortStoragePtr,
  ]],
  THShortStorage_size: [ref.types.long, [
    THShortStoragePtr,
  ]],
  THShortStorage_elementSize: [ref.types.int32, [
  ]],
  THShortStorage_set: [ref.types.void, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.short,
  ]],
  THShortStorage_get: [ref.types.short, [
    THShortStoragePtr,
    ref.types.long,
  ]],
  THShortStorage_new: [THShortStoragePtr, [
  ]],
  THShortStorage_newWithSize: [THShortStoragePtr, [
    ref.types.long,
  ]],
  THShortStorage_newWithSize1: [THShortStoragePtr, [
    ref.types.short,
  ]],
  THShortStorage_newWithSize2: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithSize3: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithSize4: [THShortStoragePtr, [
    ref.types.short,
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THShortStorage_newWithMapping: [THShortStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THShortStorage_newWithData: [THShortStoragePtr, [
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THShortStorage_newWithAllocator: [THShortStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THShortStorage_newWithDataAndAllocator: [THShortStoragePtr, [
    ref.refType(ref.types.short),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THShortStorage_setFlag: [ref.types.void, [
    THShortStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_clearFlag: [ref.types.void, [
    THShortStoragePtr,
    ref.types.char,
  ]],
  THShortStorage_retain: [ref.types.void, [
    THShortStoragePtr,
  ]],
  THShortStorage_swap: [ref.types.void, [
    THShortStoragePtr,
    THShortStoragePtr,
  ]],
  THShortStorage_free: [ref.types.void, [
    THShortStoragePtr,
  ]],
  THShortStorage_resize: [ref.types.void, [
    THShortStoragePtr,
    ref.types.long,
  ]],
  THShortStorage_fill: [ref.types.void, [
    THShortStoragePtr,
    ref.types.short,
  ]],
  THIntStorage_data: [ref.refType(ref.types.int32), [
    THIntStoragePtr,
  ]],
  THIntStorage_size: [ref.types.long, [
    THIntStoragePtr,
  ]],
  THIntStorage_elementSize: [ref.types.int32, [
  ]],
  THIntStorage_set: [ref.types.void, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntStorage_get: [ref.types.int32, [
    THIntStoragePtr,
    ref.types.long,
  ]],
  THIntStorage_new: [THIntStoragePtr, [
  ]],
  THIntStorage_newWithSize: [THIntStoragePtr, [
    ref.types.long,
  ]],
  THIntStorage_newWithSize1: [THIntStoragePtr, [
    ref.types.int32,
  ]],
  THIntStorage_newWithSize2: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithSize3: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithSize4: [THIntStoragePtr, [
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntStorage_newWithMapping: [THIntStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntStorage_newWithData: [THIntStoragePtr, [
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THIntStorage_newWithAllocator: [THIntStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THIntStorage_newWithDataAndAllocator: [THIntStoragePtr, [
    ref.refType(ref.types.int32),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THIntStorage_setFlag: [ref.types.void, [
    THIntStoragePtr,
    ref.types.char,
  ]],
  THIntStorage_clearFlag: [ref.types.void, [
    THIntStoragePtr,
    ref.types.char,
  ]],
  THIntStorage_retain: [ref.types.void, [
    THIntStoragePtr,
  ]],
  THIntStorage_swap: [ref.types.void, [
    THIntStoragePtr,
    THIntStoragePtr,
  ]],
  THIntStorage_free: [ref.types.void, [
    THIntStoragePtr,
  ]],
  THIntStorage_resize: [ref.types.void, [
    THIntStoragePtr,
    ref.types.long,
  ]],
  THIntStorage_fill: [ref.types.void, [
    THIntStoragePtr,
    ref.types.int32,
  ]],
  THLongStorage_data: [ref.refType(ref.types.long), [
    THLongStoragePtr,
  ]],
  THLongStorage_size: [ref.types.long, [
    THLongStoragePtr,
  ]],
  THLongStorage_elementSize: [ref.types.int32, [
  ]],
  THLongStorage_set: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_get: [ref.types.long, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THLongStorage_new: [THLongStoragePtr, [
  ]],
  THLongStorage_newWithSize: [THLongStoragePtr, [
    ref.types.long,
  ]],
  THLongStorage_newWithSize1: [THLongStoragePtr, [
    ref.types.long,
  ]],
  THLongStorage_newWithSize2: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithSize3: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithSize4: [THLongStoragePtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongStorage_newWithMapping: [THLongStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THLongStorage_newWithData: [THLongStoragePtr, [
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THLongStorage_newWithAllocator: [THLongStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THLongStorage_newWithDataAndAllocator: [THLongStoragePtr, [
    ref.refType(ref.types.long),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THLongStorage_setFlag: [ref.types.void, [
    THLongStoragePtr,
    ref.types.char,
  ]],
  THLongStorage_clearFlag: [ref.types.void, [
    THLongStoragePtr,
    ref.types.char,
  ]],
  THLongStorage_retain: [ref.types.void, [
    THLongStoragePtr,
  ]],
  THLongStorage_swap: [ref.types.void, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongStorage_free: [ref.types.void, [
    THLongStoragePtr,
  ]],
  THLongStorage_resize: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THLongStorage_fill: [ref.types.void, [
    THLongStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_data: [ref.refType(ref.types.float), [
    THFloatStoragePtr,
  ]],
  THFloatStorage_size: [ref.types.long, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_elementSize: [ref.types.int32, [
  ]],
  THFloatStorage_set: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatStorage_get: [ref.types.float, [
    THFloatStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_new: [THFloatStoragePtr, [
  ]],
  THFloatStorage_newWithSize: [THFloatStoragePtr, [
    ref.types.long,
  ]],
  THFloatStorage_newWithSize1: [THFloatStoragePtr, [
    ref.types.float,
  ]],
  THFloatStorage_newWithSize2: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithSize3: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithSize4: [THFloatStoragePtr, [
    ref.types.float,
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatStorage_newWithMapping: [THFloatStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THFloatStorage_newWithData: [THFloatStoragePtr, [
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THFloatStorage_newWithAllocator: [THFloatStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THFloatStorage_newWithDataAndAllocator: [THFloatStoragePtr, [
    ref.refType(ref.types.float),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THFloatStorage_setFlag: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.char,
  ]],
  THFloatStorage_clearFlag: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.char,
  ]],
  THFloatStorage_retain: [ref.types.void, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_swap: [ref.types.void, [
    THFloatStoragePtr,
    THFloatStoragePtr,
  ]],
  THFloatStorage_free: [ref.types.void, [
    THFloatStoragePtr,
  ]],
  THFloatStorage_resize: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.long,
  ]],
  THFloatStorage_fill: [ref.types.void, [
    THFloatStoragePtr,
    ref.types.float,
  ]],
  THDoubleStorage_data: [ref.refType(ref.types.double), [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_size: [ref.types.long, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_elementSize: [ref.types.int32, [
  ]],
  THDoubleStorage_set: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleStorage_get: [ref.types.double, [
    THDoubleStoragePtr,
    ref.types.long,
  ]],
  THDoubleStorage_new: [THDoubleStoragePtr, [
  ]],
  THDoubleStorage_newWithSize: [THDoubleStoragePtr, [
    ref.types.long,
  ]],
  THDoubleStorage_newWithSize1: [THDoubleStoragePtr, [
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize2: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize3: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithSize4: [THDoubleStoragePtr, [
    ref.types.double,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleStorage_newWithMapping: [THDoubleStoragePtr, [
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THDoubleStorage_newWithData: [THDoubleStoragePtr, [
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THDoubleStorage_newWithAllocator: [THDoubleStoragePtr, [
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THDoubleStorage_newWithDataAndAllocator: [THDoubleStoragePtr, [
    ref.refType(ref.types.double),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THDoubleStorage_setFlag: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.char,
  ]],
  THDoubleStorage_clearFlag: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.char,
  ]],
  THDoubleStorage_retain: [ref.types.void, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_swap: [ref.types.void, [
    THDoubleStoragePtr,
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_free: [ref.types.void, [
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_resize: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.long,
  ]],
  THDoubleStorage_fill: [ref.types.void, [
    THDoubleStoragePtr,
    ref.types.double,
  ]],
  THByteStorage_rawCopy: [ref.types.void, [
    THByteStoragePtr,
    ref.refType(ref.types.uchar),
  ]],
  THByteStorage_copy: [ref.types.void, [
    THByteStoragePtr,
    THByteStoragePtr,
  ]],
  THByteStorage_copyByte: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyChar: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyShort: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyInt: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyLong: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyFloat: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyDouble: [ref.types.void, [
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_rawCopy: [ref.types.void, [
    THCharStoragePtr,
    ref.types.CString,
  ]],
  THCharStorage_copy: [ref.types.void, [
    THCharStoragePtr,
    THCharStoragePtr,
  ]],
  THCharStorage_copyByte: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyChar: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyShort: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyInt: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyLong: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyFloat: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyDouble: [ref.types.void, [
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_rawCopy: [ref.types.void, [
    THShortStoragePtr,
    ref.refType(ref.types.short),
  ]],
  THShortStorage_copy: [ref.types.void, [
    THShortStoragePtr,
    THShortStoragePtr,
  ]],
  THShortStorage_copyByte: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyChar: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyShort: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyInt: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyLong: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyFloat: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyDouble: [ref.types.void, [
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_rawCopy: [ref.types.void, [
    THIntStoragePtr,
    ref.refType(ref.types.int32),
  ]],
  THIntStorage_copy: [ref.types.void, [
    THIntStoragePtr,
    THIntStoragePtr,
  ]],
  THIntStorage_copyByte: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyChar: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyShort: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyInt: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyLong: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyFloat: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyDouble: [ref.types.void, [
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_rawCopy: [ref.types.void, [
    THLongStoragePtr,
    ref.refType(ref.types.long),
  ]],
  THLongStorage_copy: [ref.types.void, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongStorage_copyByte: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyChar: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyShort: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyInt: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyLong: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyFloat: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyDouble: [ref.types.void, [
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_rawCopy: [ref.types.void, [
    THFloatStoragePtr,
    ref.refType(ref.types.float),
  ]],
  THFloatStorage_copy: [ref.types.void, [
    THFloatStoragePtr,
    THFloatStoragePtr,
  ]],
  THFloatStorage_copyByte: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyChar: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyShort: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyInt: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyLong: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyFloat: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyDouble: [ref.types.void, [
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_rawCopy: [ref.types.void, [
    THDoubleStoragePtr,
    ref.refType(ref.types.double),
  ]],
  THDoubleStorage_copy: [ref.types.void, [
    THDoubleStoragePtr,
    THDoubleStoragePtr,
  ]],
  THDoubleStorage_copyByte: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyChar: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyShort: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyInt: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyLong: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyFloat: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyDouble: [ref.types.void, [
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_data: [ref.refType(ref.types.uchar), [
    THCStatePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaByteStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THCudaByteStorage_get: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
  ]],
  THCudaByteStorage_new: [THCudaByteStoragePtr, [
    THCStatePtr,
  ]],
  THCudaByteStorage_newWithSize: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaByteStorage_newWithSize1: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.uchar,
  ]],
  THCudaByteStorage_newWithSize2: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THCudaByteStorage_newWithSize3: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THCudaByteStorage_newWithSize4: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THCudaByteStorage_newWithMapping: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaByteStorage_newWithData: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.uchar),
    ref.types.long,
  ]],
  THCudaByteStorage_newWithAllocator: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaByteStorage_newWithDataAndAllocator: [THCudaByteStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.uchar),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaByteStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.char,
  ]],
  THCudaByteStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.char,
  ]],
  THCudaByteStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
  ]],
  THCudaByteStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.uchar,
  ]],
  THCudaByteStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaCharStorage_data: [ref.types.CString, [
    THCStatePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaCharStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCudaCharStorage_get: [ref.types.char, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
  ]],
  THCudaCharStorage_new: [THCudaCharStoragePtr, [
    THCStatePtr,
  ]],
  THCudaCharStorage_newWithSize: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaCharStorage_newWithSize1: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.char,
  ]],
  THCudaCharStorage_newWithSize2: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
  ]],
  THCudaCharStorage_newWithSize3: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCudaCharStorage_newWithSize4: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.char,
    ref.types.char,
    ref.types.char,
    ref.types.char,
  ]],
  THCudaCharStorage_newWithMapping: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaCharStorage_newWithData: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
  ]],
  THCudaCharStorage_newWithAllocator: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaCharStorage_newWithDataAndAllocator: [THCudaCharStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaCharStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.char,
  ]],
  THCudaCharStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.char,
  ]],
  THCudaCharStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
  ]],
  THCudaCharStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.char,
  ]],
  THCudaCharStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaShortStorage_data: [ref.refType(ref.types.short), [
    THCStatePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaShortStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.short,
  ]],
  THCudaShortStorage_get: [ref.types.short, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
  ]],
  THCudaShortStorage_new: [THCudaShortStoragePtr, [
    THCStatePtr,
  ]],
  THCudaShortStorage_newWithSize: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaShortStorage_newWithSize1: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.short,
  ]],
  THCudaShortStorage_newWithSize2: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.short,
    ref.types.short,
  ]],
  THCudaShortStorage_newWithSize3: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THCudaShortStorage_newWithSize4: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.short,
    ref.types.short,
    ref.types.short,
    ref.types.short,
  ]],
  THCudaShortStorage_newWithMapping: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaShortStorage_newWithData: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.short),
    ref.types.long,
  ]],
  THCudaShortStorage_newWithAllocator: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaShortStorage_newWithDataAndAllocator: [THCudaShortStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.short),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaShortStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.char,
  ]],
  THCudaShortStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.char,
  ]],
  THCudaShortStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
  ]],
  THCudaShortStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.short,
  ]],
  THCudaShortStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaIntStorage_data: [ref.refType(ref.types.int32), [
    THCStatePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaIntStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntStorage_get: [ref.types.int32, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
  ]],
  THCudaIntStorage_new: [THCudaIntStoragePtr, [
    THCStatePtr,
  ]],
  THCudaIntStorage_newWithSize: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaIntStorage_newWithSize1: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.int32,
  ]],
  THCudaIntStorage_newWithSize2: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntStorage_newWithSize3: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntStorage_newWithSize4: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntStorage_newWithMapping: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntStorage_newWithData: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.int32),
    ref.types.long,
  ]],
  THCudaIntStorage_newWithAllocator: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaIntStorage_newWithDataAndAllocator: [THCudaIntStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.int32),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaIntStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.char,
  ]],
  THCudaIntStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.char,
  ]],
  THCudaIntStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
  ]],
  THCudaIntStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.int32,
  ]],
  THCudaIntStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaLongStorage_data: [ref.refType(ref.types.long), [
    THCStatePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaLongStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongStorage_get: [ref.types.long, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
  ]],
  THCudaLongStorage_new: [THCudaLongStoragePtr, [
    THCStatePtr,
  ]],
  THCudaLongStorage_newWithSize: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaLongStorage_newWithSize1: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaLongStorage_newWithSize2: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongStorage_newWithSize3: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongStorage_newWithSize4: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongStorage_newWithMapping: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaLongStorage_newWithData: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.long),
    ref.types.long,
  ]],
  THCudaLongStorage_newWithAllocator: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaLongStorage_newWithDataAndAllocator: [THCudaLongStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.long),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaLongStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.char,
  ]],
  THCudaLongStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.char,
  ]],
  THCudaLongStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
  ]],
  THCudaLongStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
  ]],
  THCudaLongStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaHalfStorage_data: [halfPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaHalfStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaHalfStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaHalfStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    half,
  ]],
  THCudaHalfStorage_get: [half, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
  ]],
  THCudaHalfStorage_new: [THCudaHalfStoragePtr, [
    THCStatePtr,
  ]],
  THCudaHalfStorage_newWithSize: [THCudaHalfStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaHalfStorage_newWithSize1: [THCudaHalfStoragePtr, [
    THCStatePtr,
    half,
  ]],
  THCudaHalfStorage_newWithSize2: [THCudaHalfStoragePtr, [
    THCStatePtr,
    half,
    half,
  ]],
  THCudaHalfStorage_newWithSize3: [THCudaHalfStoragePtr, [
    THCStatePtr,
    half,
    half,
    half,
  ]],
  THCudaHalfStorage_newWithSize4: [THCudaHalfStoragePtr, [
    THCStatePtr,
    half,
    half,
    half,
    half,
  ]],
  THCudaHalfStorage_newWithMapping: [THCudaHalfStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaHalfStorage_newWithData: [THCudaHalfStoragePtr, [
    THCStatePtr,
    halfPtr,
    ref.types.long,
  ]],
  THCudaHalfStorage_newWithAllocator: [THCudaHalfStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaHalfStorage_newWithDataAndAllocator: [THCudaHalfStoragePtr, [
    THCStatePtr,
    halfPtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaHalfStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.char,
  ]],
  THCudaHalfStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.char,
  ]],
  THCudaHalfStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaHalfStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaHalfStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
  ]],
  THCudaHalfStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    half,
  ]],
  THCudaHalfStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaStorage_data: [ref.refType(ref.types.float), [
    THCStatePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaStorage_get: [ref.types.float, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
  ]],
  THCudaStorage_new: [THCudaStoragePtr, [
    THCStatePtr,
  ]],
  THCudaStorage_newWithSize: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaStorage_newWithSize1: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.float,
  ]],
  THCudaStorage_newWithSize2: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.float,
    ref.types.float,
  ]],
  THCudaStorage_newWithSize3: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THCudaStorage_newWithSize4: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.float,
    ref.types.float,
    ref.types.float,
    ref.types.float,
  ]],
  THCudaStorage_newWithMapping: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaStorage_newWithData: [THCudaStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.float),
    ref.types.long,
  ]],
  THCudaStorage_newWithAllocator: [THCudaStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaStorage_newWithDataAndAllocator: [THCudaStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.float),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.char,
  ]],
  THCudaStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.char,
  ]],
  THCudaStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
  ]],
  THCudaStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.float,
  ]],
  THCudaStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaStoragePtr,
  ]],
  THCudaDoubleStorage_data: [ref.refType(ref.types.double), [
    THCStatePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_size: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_elementSize: [ref.types.int32, [
    THCStatePtr,
  ]],
  THCudaDoubleStorage_set: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.double,
  ]],
  THCudaDoubleStorage_get: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
  ]],
  THCudaDoubleStorage_new: [THCudaDoubleStoragePtr, [
    THCStatePtr,
  ]],
  THCudaDoubleStorage_newWithSize: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaDoubleStorage_newWithSize1: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.double,
  ]],
  THCudaDoubleStorage_newWithSize2: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaDoubleStorage_newWithSize3: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaDoubleStorage_newWithSize4: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaDoubleStorage_newWithMapping: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.CString,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaDoubleStorage_newWithData: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.double),
    ref.types.long,
  ]],
  THCudaDoubleStorage_newWithAllocator: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_newWithDataAndAllocator: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    ref.refType(ref.types.double),
    ref.types.long,
    THAllocatorPtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.char,
  ]],
  THCudaDoubleStorage_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.char,
  ]],
  THCudaDoubleStorage_retain: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_free: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_resize: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
  ]],
  THCudaDoubleStorage_fill: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.double,
  ]],
  THCudaDoubleStorage_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaByteStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.refType(ref.types.uchar),
  ]],
  THCudaByteStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THCudaByteStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    THCudaByteStoragePtr,
  ]],
  THCudaByteStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaByteStoragePtr,
    THByteStoragePtr,
  ]],
  THCudaCharStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.CString,
  ]],
  THCudaCharStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THCudaCharStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    THCudaCharStoragePtr,
  ]],
  THCudaCharStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaCharStoragePtr,
    THCharStoragePtr,
  ]],
  THCudaShortStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.refType(ref.types.short),
  ]],
  THCudaShortStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THCudaShortStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    THCudaShortStoragePtr,
  ]],
  THCudaShortStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaShortStoragePtr,
    THShortStoragePtr,
  ]],
  THCudaIntStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.refType(ref.types.int32),
  ]],
  THCudaIntStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THCudaIntStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    THCudaIntStoragePtr,
  ]],
  THCudaIntStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaIntStoragePtr,
    THIntStoragePtr,
  ]],
  THCudaLongStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.refType(ref.types.long),
  ]],
  THCudaLongStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THCudaLongStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    THCudaLongStoragePtr,
  ]],
  THCudaLongStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaHalfStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    halfPtr,
  ]],
  THCudaHalfStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    THCudaHalfStoragePtr,
  ]],
  THCudaHalfStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THCudaHalfStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.refType(ref.types.float),
  ]],
  THCudaStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THCudaStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    THCudaStoragePtr,
  ]],
  THCudaStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaStoragePtr,
    THFloatStoragePtr,
  ]],
  THCudaDoubleStorage_rawCopy: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.refType(ref.types.double),
  ]],
  THCudaDoubleStorage_copy: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THCudaDoubleStorage_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    voidPtr,
  ]],
  THByteStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THByteStoragePtr,
    voidPtr,
  ]],
  THCharStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCharStoragePtr,
    voidPtr,
  ]],
  THShortStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THShortStoragePtr,
    voidPtr,
  ]],
  THIntStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THIntStoragePtr,
    voidPtr,
  ]],
  THLongStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THLongStoragePtr,
    voidPtr,
  ]],
  THFloatStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THFloatStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    voidPtr,
  ]],
  THDoubleStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THDoubleStoragePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    THCudaDoubleStoragePtr,
  ]],
  THCudaDoubleStorage_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    THDoubleStoragePtr,
  ]],
  THByteTensor_storage: [THByteStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_storageOffset: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_nDimension: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_size: [ref.types.long, [
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_stride: [ref.types.long, [
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_newSizeOf: [THLongStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newStrideOf: [THLongStoragePtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_data: [ref.refType(ref.types.uchar), [
    THByteTensorPtr,
  ]],
  THByteTensor_setFlag: [ref.types.void, [
    THByteTensorPtr,
    ref.types.char,
  ]],
  THByteTensor_clearFlag: [ref.types.void, [
    THByteTensorPtr,
    ref.types.char,
  ]],
  THByteTensor_new: [THByteTensorPtr, [
  ]],
  THByteTensor_newWithTensor: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newWithStorage: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_newWithStorage1d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage2d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage3d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithStorage4d: [THByteTensorPtr, [
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize: [THByteTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_newWithSize1d: [THByteTensorPtr, [
    ref.types.long,
  ]],
  THByteTensor_newWithSize2d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize3d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newWithSize4d: [THByteTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newClone: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newContiguous: [THByteTensorPtr, [
    THByteTensorPtr,
  ]],
  THByteTensor_newSelect: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THByteTensor_newNarrow: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_newTranspose: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_newUnfold: [THByteTensorPtr, [
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_resizeAs: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_resize1d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_resize2d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize3d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize4d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_resize5d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_set: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_setStorage: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THByteTensor_setStorage1d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage2d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage3d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_setStorage4d: [ref.types.void, [
    THByteTensorPtr,
    THByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_narrow: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_select: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THByteTensor_transpose: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_unfold: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_squeeze: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_squeeze1d: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_isContiguous: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_isSameSizeAs: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_isSetTo: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_isSize: [ref.types.int32, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_nElement: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_retain: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_free: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_freeCopyTo: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_set1d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set2d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set3d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_set4d: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THByteTensor_get1d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_get2d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_get3d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_get4d: [ref.types.uchar, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_desc: [THDescBuff, [
    THByteTensorPtr,
  ]],
  THByteTensor_sizeDesc: [THDescBuff, [
    THByteTensorPtr,
  ]],
  THCharTensor_storage: [THCharStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_storageOffset: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_nDimension: [ref.types.int32, [
    THCharTensorPtr,
  ]],
  THCharTensor_size: [ref.types.long, [
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_stride: [ref.types.long, [
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_newSizeOf: [THLongStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newStrideOf: [THLongStoragePtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_data: [ref.types.CString, [
    THCharTensorPtr,
  ]],
  THCharTensor_setFlag: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_clearFlag: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_new: [THCharTensorPtr, [
  ]],
  THCharTensor_newWithTensor: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newWithStorage: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_newWithStorage1d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage2d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage3d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithStorage4d: [THCharTensorPtr, [
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize: [THCharTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_newWithSize1d: [THCharTensorPtr, [
    ref.types.long,
  ]],
  THCharTensor_newWithSize2d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize3d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newWithSize4d: [THCharTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newClone: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newContiguous: [THCharTensorPtr, [
    THCharTensorPtr,
  ]],
  THCharTensor_newSelect: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCharTensor_newNarrow: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_newTranspose: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_newUnfold: [THCharTensorPtr, [
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_resizeAs: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_resize1d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_resize2d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize3d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize4d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_resize5d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_set: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_setStorage: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCharTensor_setStorage1d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage2d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage3d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_setStorage4d: [ref.types.void, [
    THCharTensorPtr,
    THCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_narrow: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_select: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCharTensor_transpose: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_unfold: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_squeeze: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_squeeze1d: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_isContiguous: [ref.types.int32, [
    THCharTensorPtr,
  ]],
  THCharTensor_isSameSizeAs: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_isSetTo: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_isSize: [ref.types.int32, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_nElement: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_retain: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_free: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_freeCopyTo: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_set1d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set2d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set3d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_set4d: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCharTensor_get1d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_get2d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_get3d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_get4d: [ref.types.char, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_desc: [THDescBuff, [
    THCharTensorPtr,
  ]],
  THCharTensor_sizeDesc: [THDescBuff, [
    THCharTensorPtr,
  ]],
  THShortTensor_storage: [THShortStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_storageOffset: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_nDimension: [ref.types.int32, [
    THShortTensorPtr,
  ]],
  THShortTensor_size: [ref.types.long, [
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_stride: [ref.types.long, [
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_newSizeOf: [THLongStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newStrideOf: [THLongStoragePtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_data: [ref.refType(ref.types.short), [
    THShortTensorPtr,
  ]],
  THShortTensor_setFlag: [ref.types.void, [
    THShortTensorPtr,
    ref.types.char,
  ]],
  THShortTensor_clearFlag: [ref.types.void, [
    THShortTensorPtr,
    ref.types.char,
  ]],
  THShortTensor_new: [THShortTensorPtr, [
  ]],
  THShortTensor_newWithTensor: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newWithStorage: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_newWithStorage1d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage2d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage3d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithStorage4d: [THShortTensorPtr, [
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize: [THShortTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_newWithSize1d: [THShortTensorPtr, [
    ref.types.long,
  ]],
  THShortTensor_newWithSize2d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize3d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newWithSize4d: [THShortTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newClone: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newContiguous: [THShortTensorPtr, [
    THShortTensorPtr,
  ]],
  THShortTensor_newSelect: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THShortTensor_newNarrow: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_newTranspose: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_newUnfold: [THShortTensorPtr, [
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_resizeAs: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_resize1d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_resize2d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize3d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize4d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_resize5d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_set: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_setStorage: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THShortTensor_setStorage1d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage2d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage3d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_setStorage4d: [ref.types.void, [
    THShortTensorPtr,
    THShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_narrow: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_select: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THShortTensor_transpose: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_unfold: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_squeeze: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_squeeze1d: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_isContiguous: [ref.types.int32, [
    THShortTensorPtr,
  ]],
  THShortTensor_isSameSizeAs: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_isSetTo: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_isSize: [ref.types.int32, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_nElement: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_retain: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_free: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_freeCopyTo: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_set1d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set2d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set3d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_set4d: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THShortTensor_get1d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_get2d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_get3d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_get4d: [ref.types.short, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_desc: [THDescBuff, [
    THShortTensorPtr,
  ]],
  THShortTensor_sizeDesc: [THDescBuff, [
    THShortTensorPtr,
  ]],
  THIntTensor_storage: [THIntStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_storageOffset: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_nDimension: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_size: [ref.types.long, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_stride: [ref.types.long, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_newSizeOf: [THLongStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newStrideOf: [THLongStoragePtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_data: [ref.refType(ref.types.int32), [
    THIntTensorPtr,
  ]],
  THIntTensor_setFlag: [ref.types.void, [
    THIntTensorPtr,
    ref.types.char,
  ]],
  THIntTensor_clearFlag: [ref.types.void, [
    THIntTensorPtr,
    ref.types.char,
  ]],
  THIntTensor_new: [THIntTensorPtr, [
  ]],
  THIntTensor_newWithTensor: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newWithStorage: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_newWithStorage1d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage2d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage3d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithStorage4d: [THIntTensorPtr, [
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize: [THIntTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_newWithSize1d: [THIntTensorPtr, [
    ref.types.long,
  ]],
  THIntTensor_newWithSize2d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize3d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newWithSize4d: [THIntTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newClone: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newContiguous: [THIntTensorPtr, [
    THIntTensorPtr,
  ]],
  THIntTensor_newSelect: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THIntTensor_newNarrow: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_newTranspose: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_newUnfold: [THIntTensorPtr, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_resizeAs: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_resize1d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_resize2d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize3d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize4d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_resize5d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_set: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_setStorage: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THIntTensor_setStorage1d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage2d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage3d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_setStorage4d: [ref.types.void, [
    THIntTensorPtr,
    THIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_narrow: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_select: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THIntTensor_transpose: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_unfold: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_squeeze: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_squeeze1d: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_isContiguous: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_isSameSizeAs: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_isSetTo: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_isSize: [ref.types.int32, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_nElement: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_retain: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_free: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_freeCopyTo: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_set1d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set2d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set3d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_set4d: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_get1d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_get2d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_get3d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_get4d: [ref.types.int32, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_desc: [THDescBuff, [
    THIntTensorPtr,
  ]],
  THIntTensor_sizeDesc: [THDescBuff, [
    THIntTensorPtr,
  ]],
  THLongTensor_storage: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_storageOffset: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_nDimension: [ref.types.int32, [
    THLongTensorPtr,
  ]],
  THLongTensor_size: [ref.types.long, [
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_stride: [ref.types.long, [
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_newSizeOf: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newStrideOf: [THLongStoragePtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_data: [ref.refType(ref.types.long), [
    THLongTensorPtr,
  ]],
  THLongTensor_setFlag: [ref.types.void, [
    THLongTensorPtr,
    ref.types.char,
  ]],
  THLongTensor_clearFlag: [ref.types.void, [
    THLongTensorPtr,
    ref.types.char,
  ]],
  THLongTensor_new: [THLongTensorPtr, [
  ]],
  THLongTensor_newWithTensor: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newWithStorage: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_newWithStorage1d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage2d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage3d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithStorage4d: [THLongTensorPtr, [
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize: [THLongTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_newWithSize1d: [THLongTensorPtr, [
    ref.types.long,
  ]],
  THLongTensor_newWithSize2d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize3d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newWithSize4d: [THLongTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newClone: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newContiguous: [THLongTensorPtr, [
    THLongTensorPtr,
  ]],
  THLongTensor_newSelect: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THLongTensor_newNarrow: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_newTranspose: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_newUnfold: [THLongTensorPtr, [
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_resizeAs: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_resize1d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_resize2d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize3d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize4d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_resize5d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_setStorage: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THLongTensor_setStorage1d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage2d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage3d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_setStorage4d: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_narrow: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_select: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THLongTensor_transpose: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_unfold: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_squeeze: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_squeeze1d: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_isContiguous: [ref.types.int32, [
    THLongTensorPtr,
  ]],
  THLongTensor_isSameSizeAs: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_isSetTo: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_isSize: [ref.types.int32, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_nElement: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_retain: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_free: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_freeCopyTo: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_set1d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set2d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set3d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_set4d: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get1d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_get2d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get3d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_get4d: [ref.types.long, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_desc: [THDescBuff, [
    THLongTensorPtr,
  ]],
  THLongTensor_sizeDesc: [THDescBuff, [
    THLongTensorPtr,
  ]],
  THFloatTensor_storage: [THFloatStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_storageOffset: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_nDimension: [ref.types.int32, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_size: [ref.types.long, [
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_stride: [ref.types.long, [
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_newSizeOf: [THLongStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newStrideOf: [THLongStoragePtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_data: [ref.refType(ref.types.float), [
    THFloatTensorPtr,
  ]],
  THFloatTensor_setFlag: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.char,
  ]],
  THFloatTensor_clearFlag: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.char,
  ]],
  THFloatTensor_new: [THFloatTensorPtr, [
  ]],
  THFloatTensor_newWithTensor: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newWithStorage: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_newWithStorage1d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage2d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage3d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithStorage4d: [THFloatTensorPtr, [
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize: [THFloatTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_newWithSize1d: [THFloatTensorPtr, [
    ref.types.long,
  ]],
  THFloatTensor_newWithSize2d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize3d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newWithSize4d: [THFloatTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newClone: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newContiguous: [THFloatTensorPtr, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_newSelect: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THFloatTensor_newNarrow: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_newTranspose: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_newUnfold: [THFloatTensorPtr, [
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_resizeAs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_resize1d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_resize2d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize3d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize4d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_resize5d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_set: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_setStorage: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_setStorage1d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage2d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage3d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_setStorage4d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_narrow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_select: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THFloatTensor_transpose: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_unfold: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_squeeze: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_squeeze1d: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_isContiguous: [ref.types.int32, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSameSizeAs: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSetTo: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_isSize: [ref.types.int32, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_nElement: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_retain: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_free: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_freeCopyTo: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_set1d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set2d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set3d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_set4d: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THFloatTensor_get1d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_get2d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_get3d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_get4d: [ref.types.float, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_desc: [THDescBuff, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_sizeDesc: [THDescBuff, [
    THFloatTensorPtr,
  ]],
  THDoubleTensor_storage: [THDoubleStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_storageOffset: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_nDimension: [ref.types.int32, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_size: [ref.types.long, [
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_stride: [ref.types.long, [
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_newSizeOf: [THLongStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newStrideOf: [THLongStoragePtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_data: [ref.refType(ref.types.double), [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_setFlag: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.char,
  ]],
  THDoubleTensor_clearFlag: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.char,
  ]],
  THDoubleTensor_new: [THDoubleTensorPtr, [
  ]],
  THDoubleTensor_newWithTensor: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newWithStorage: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_newWithStorage1d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage2d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage3d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithStorage4d: [THDoubleTensorPtr, [
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize: [THDoubleTensorPtr, [
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_newWithSize1d: [THDoubleTensorPtr, [
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize2d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize3d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newWithSize4d: [THDoubleTensorPtr, [
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newClone: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newContiguous: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_newSelect: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THDoubleTensor_newNarrow: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_newTranspose: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_newUnfold: [THDoubleTensorPtr, [
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_resizeAs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_resize1d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_resize2d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize3d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize4d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_resize5d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_set: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_setStorage: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_setStorage1d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage2d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage3d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_setStorage4d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_narrow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_select: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THDoubleTensor_transpose: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_unfold: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_squeeze: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_squeeze1d: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_isContiguous: [ref.types.int32, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSameSizeAs: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSetTo: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_isSize: [ref.types.int32, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_nElement: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_retain: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_free: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_freeCopyTo: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_set1d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set2d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set3d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_set4d: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THDoubleTensor_get1d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_get2d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_get3d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_get4d: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_desc: [THDescBuff, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sizeDesc: [THDescBuff, [
    THDoubleTensorPtr,
  ]],
  THByteTensor_copy: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_copyByte: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyChar: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyShort: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyInt: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyLong: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyFloat: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyDouble: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copy: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_copyByte: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyChar: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyShort: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyInt: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyLong: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyFloat: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THCharTensor_copyDouble: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copy: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_copyByte: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyChar: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyShort: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyInt: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyLong: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyFloat: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THShortTensor_copyDouble: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copy: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_copyByte: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyChar: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyShort: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyInt: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyLong: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyFloat: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THIntTensor_copyDouble: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copy: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_copyByte: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyChar: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyShort: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyInt: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyLong: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyFloat: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THLongTensor_copyDouble: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copy: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_copyByte: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyChar: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyShort: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyInt: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyLong: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyFloat: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THFloatTensor_copyDouble: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copy: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_copyByte: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyChar: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyShort: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyInt: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyLong: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyFloat: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THDoubleTensor_copyDouble: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
  ]],
  THGenerator_new: [THGeneratorPtr, [
  ]],
  THGenerator_copy: [THGeneratorPtr, [
    THGeneratorPtr,
    THGeneratorPtr,
  ]],
  THGenerator_free: [ref.types.void, [
    THGeneratorPtr,
  ]],
  THGenerator_isValid: [ref.types.int32, [
    THGeneratorPtr,
  ]],
  THRandom_seed: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_manualSeed: [ref.types.void, [
    THGeneratorPtr,
    ref.types.ulong,
  ]],
  THRandom_initialSeed: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_random: [ref.types.ulong, [
    THGeneratorPtr,
  ]],
  THRandom_uniform: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_normal: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_exponential: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THRandom_cauchy: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_logNormal: [ref.types.double, [
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THRandom_geometric: [ref.types.int32, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THRandom_bernoulli: [ref.types.int32, [
    THGeneratorPtr,
    ref.types.double,
  ]],
  THByteTensor_random: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
  ]],
  THByteTensor_geometric: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THByteTensor_bernoulli: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THByteTensor_bernoulli_FloatTensor: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THByteTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THByteTensor_getRNGState: [ref.types.void, [
    THGeneratorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_setRNGState: [ref.types.void, [
    THGeneratorPtr,
    THByteTensorPtr,
  ]],
  THCharTensor_random: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
  ]],
  THCharTensor_geometric: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THCharTensor_bernoulli: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THCharTensor_bernoulli_FloatTensor: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THCharTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THShortTensor_random: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
  ]],
  THShortTensor_geometric: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THShortTensor_bernoulli: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THShortTensor_bernoulli_FloatTensor: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THShortTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THIntTensor_random: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
  ]],
  THIntTensor_geometric: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THIntTensor_bernoulli: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THIntTensor_bernoulli_FloatTensor: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THIntTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THLongTensor_random: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
  ]],
  THLongTensor_geometric: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THLongTensor_bernoulli: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THLongTensor_bernoulli_FloatTensor: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THLongTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THFloatTensor_random: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
  ]],
  THFloatTensor_geometric: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_bernoulli: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_bernoulli_FloatTensor: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THFloatTensor_uniform: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_normal: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_exponential: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THFloatTensor_cauchy: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_logNormal: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_multinomial: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_random: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
  ]],
  THDoubleTensor_geometric: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_bernoulli: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_bernoulli_FloatTensor: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THFloatTensorPtr,
  ]],
  THDoubleTensor_bernoulli_DoubleTensor: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_uniform: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_normal: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_exponential: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_cauchy: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_logNormal: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_multinomial: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_fill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_zero: [ref.types.void, [
    THByteTensorPtr,
  ]],
  THByteTensor_maskedFill: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_maskedCopy: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_maskedSelect: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexSelect: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THByteTensor_indexCopy: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexAdd: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_indexFill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gather: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THByteTensor_scatter: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_scatterFill: [ref.types.void, [
    THByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_dot: [ref.types.long, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_minall: [ref.types.uchar, [
    THByteTensorPtr,
  ]],
  THByteTensor_maxall: [ref.types.uchar, [
    THByteTensorPtr,
  ]],
  THByteTensor_sumall: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_prodall: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_neg: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cinv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_add: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_sub: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_mul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_div: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_fmod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_remainder: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_clamp: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
  ]],
  THByteTensor_cadd: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
  ]],
  THByteTensor_csub: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
  ]],
  THByteTensor_cmul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cpow: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cdiv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cfmod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cremainder: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addcmul: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addcdiv: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addr: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_addbmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_baddbmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_match: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_numel: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_max: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_min: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_kthvalue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THByteTensor_mode: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_median: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_sum: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_prod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cumsum: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cumprod: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_sign: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_trace: [ref.types.long, [
    THByteTensorPtr,
  ]],
  THByteTensor_cross: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_cmax: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cmin: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_cmaxValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_cminValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_zeros: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_ones: [ref.types.void, [
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_diag: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_eye: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_range: [ref.types.void, [
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_randperm: [ref.types.void, [
    THByteTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THByteTensor_reshape: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_sort: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_topk: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_tril: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_triu: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THByteTensor_cat: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THByteTensor_catArray: [ref.types.void, [
    THByteTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THByteTensor_equal: [ref.types.int32, [
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_ltValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_leValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_gtValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_geValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_neValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_eqValueT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THByteTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_ltTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_leTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_gtTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_geTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_neTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_eqTensorT: [ref.types.void, [
    THByteTensorPtr,
    THByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_logicalall: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THByteTensor_logicalany: [ref.types.int32, [
    THByteTensorPtr,
  ]],
  THCharTensor_fill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_zero: [ref.types.void, [
    THCharTensorPtr,
  ]],
  THCharTensor_maskedFill: [ref.types.void, [
    THCharTensorPtr,
    THByteTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_maskedCopy: [ref.types.void, [
    THCharTensorPtr,
    THByteTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_maskedSelect: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THByteTensorPtr,
  ]],
  THCharTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexSelect: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCharTensor_indexCopy: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexAdd: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_indexFill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gather: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCharTensor_scatter: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_scatterFill: [ref.types.void, [
    THCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_dot: [ref.types.long, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_minall: [ref.types.char, [
    THCharTensorPtr,
  ]],
  THCharTensor_maxall: [ref.types.char, [
    THCharTensorPtr,
  ]],
  THCharTensor_sumall: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_prodall: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_neg: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cinv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_add: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_sub: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_mul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_div: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_fmod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_remainder: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_clamp: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
  ]],
  THCharTensor_cadd: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
  ]],
  THCharTensor_csub: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
  ]],
  THCharTensor_cmul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cpow: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cdiv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cfmod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cremainder: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addcmul: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addcdiv: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addr: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_addbmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_baddbmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_match: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_numel: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_max: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_min: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_kthvalue: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCharTensor_mode: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_median: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_sum: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_prod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cumsum: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cumprod: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_sign: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_trace: [ref.types.long, [
    THCharTensorPtr,
  ]],
  THCharTensor_cross: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_cmax: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cmin: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_cmaxValue: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_cminValue: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_zeros: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_ones: [ref.types.void, [
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_diag: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_eye: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_range: [ref.types.void, [
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_randperm: [ref.types.void, [
    THCharTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THCharTensor_reshape: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCharTensor_sort: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_topk: [ref.types.void, [
    THCharTensorPtr,
    THLongTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_tril: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_triu: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
  ]],
  THCharTensor_cat: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.int32,
  ]],
  THCharTensor_catArray: [ref.types.void, [
    THCharTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCharTensor_equal: [ref.types.int32, [
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_ltValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_leValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_gtValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_geValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_neValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_eqValueT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.char,
  ]],
  THCharTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_ltTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_leTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_gtTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_geTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_neTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_eqTensorT: [ref.types.void, [
    THCharTensorPtr,
    THCharTensorPtr,
    THCharTensorPtr,
  ]],
  THShortTensor_fill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_zero: [ref.types.void, [
    THShortTensorPtr,
  ]],
  THShortTensor_maskedFill: [ref.types.void, [
    THShortTensorPtr,
    THByteTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_maskedCopy: [ref.types.void, [
    THShortTensorPtr,
    THByteTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_maskedSelect: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THByteTensorPtr,
  ]],
  THShortTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexSelect: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THShortTensor_indexCopy: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexAdd: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_indexFill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gather: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THShortTensor_scatter: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_scatterFill: [ref.types.void, [
    THShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_dot: [ref.types.long, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_minall: [ref.types.short, [
    THShortTensorPtr,
  ]],
  THShortTensor_maxall: [ref.types.short, [
    THShortTensorPtr,
  ]],
  THShortTensor_sumall: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_prodall: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_neg: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cinv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_add: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_sub: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_mul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_div: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_fmod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_remainder: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_clamp: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
  ]],
  THShortTensor_cadd: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
  ]],
  THShortTensor_csub: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
  ]],
  THShortTensor_cmul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cpow: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cdiv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cfmod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cremainder: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addcmul: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addcdiv: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addr: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_addbmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_baddbmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_match: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_numel: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_max: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_min: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_kthvalue: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THShortTensor_mode: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_median: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_sum: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_prod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cumsum: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cumprod: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_sign: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_trace: [ref.types.long, [
    THShortTensorPtr,
  ]],
  THShortTensor_cross: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_cmax: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cmin: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_cmaxValue: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_cminValue: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_zeros: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_ones: [ref.types.void, [
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_diag: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_eye: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_range: [ref.types.void, [
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_randperm: [ref.types.void, [
    THShortTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THShortTensor_reshape: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THLongStoragePtr,
  ]],
  THShortTensor_sort: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_topk: [ref.types.void, [
    THShortTensorPtr,
    THLongTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_tril: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_triu: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
  ]],
  THShortTensor_cat: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.int32,
  ]],
  THShortTensor_catArray: [ref.types.void, [
    THShortTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THShortTensor_equal: [ref.types.int32, [
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_ltValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_leValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_gtValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_geValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_neValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_eqValueT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.short,
  ]],
  THShortTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_ltTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_leTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_gtTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_geTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_neTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_eqTensorT: [ref.types.void, [
    THShortTensorPtr,
    THShortTensorPtr,
    THShortTensorPtr,
  ]],
  THIntTensor_fill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_zero: [ref.types.void, [
    THIntTensorPtr,
  ]],
  THIntTensor_maskedFill: [ref.types.void, [
    THIntTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_maskedCopy: [ref.types.void, [
    THIntTensorPtr,
    THByteTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_maskedSelect: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THByteTensorPtr,
  ]],
  THIntTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexSelect: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THIntTensor_indexCopy: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexAdd: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_indexFill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gather: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THIntTensor_scatter: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_scatterFill: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_dot: [ref.types.long, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_minall: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_maxall: [ref.types.int32, [
    THIntTensorPtr,
  ]],
  THIntTensor_sumall: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_prodall: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_neg: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cinv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_add: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sub: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_mul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_div: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_fmod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_remainder: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_clamp: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_cadd: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
  ]],
  THIntTensor_csub: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
  ]],
  THIntTensor_cmul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cpow: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cdiv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cfmod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cremainder: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addcmul: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addcdiv: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addr: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_addbmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_baddbmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_match: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_numel: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_max: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_min: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_kthvalue: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THIntTensor_mode: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_median: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sum: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_prod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cumsum: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cumprod: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_sign: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_trace: [ref.types.long, [
    THIntTensorPtr,
  ]],
  THIntTensor_cross: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cmax: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cmin: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_cmaxValue: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_cminValue: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_zeros: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_ones: [ref.types.void, [
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_diag: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eye: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_range: [ref.types.void, [
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_randperm: [ref.types.void, [
    THIntTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THIntTensor_reshape: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THLongStoragePtr,
  ]],
  THIntTensor_sort: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_topk: [ref.types.void, [
    THIntTensorPtr,
    THLongTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_tril: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_triu: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
  ]],
  THIntTensor_cat: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_catArray: [ref.types.void, [
    THIntTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THIntTensor_equal: [ref.types.int32, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_ltValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_leValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_gtValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_geValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_neValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_eqValueT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.int32,
  ]],
  THIntTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_ltTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_leTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_gtTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_geTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_neTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_eqTensorT: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_abs: [ref.types.void, [
    THIntTensorPtr,
    THIntTensorPtr,
  ]],
  THLongTensor_fill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_zero: [ref.types.void, [
    THLongTensorPtr,
  ]],
  THLongTensor_maskedFill: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_maskedCopy: [ref.types.void, [
    THLongTensorPtr,
    THByteTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_maskedSelect: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THByteTensorPtr,
  ]],
  THLongTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexSelect: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THLongTensor_indexCopy: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexAdd: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_indexFill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gather: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THLongTensor_scatter: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_scatterFill: [ref.types.void, [
    THLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_dot: [ref.types.long, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_minall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_maxall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_sumall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_prodall: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_neg: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cinv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_add: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_sub: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_mul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_div: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_fmod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_remainder: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_clamp: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_cadd: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
  ]],
  THLongTensor_csub: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
  ]],
  THLongTensor_cmul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cpow: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cdiv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cfmod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cremainder: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addcmul: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addcdiv: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addr: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_addbmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_baddbmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_match: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_numel: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_max: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_min: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_kthvalue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THLongTensor_mode: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_median: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_sum: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_prod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cumsum: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cumprod: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_sign: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_trace: [ref.types.long, [
    THLongTensorPtr,
  ]],
  THLongTensor_cross: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_cmax: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cmin: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_cmaxValue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_cminValue: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_zeros: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_ones: [ref.types.void, [
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_diag: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_eye: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_range: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_randperm: [ref.types.void, [
    THLongTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THLongTensor_reshape: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongStoragePtr,
  ]],
  THLongTensor_sort: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_topk: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_tril: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_triu: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_cat: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THLongTensor_catArray: [ref.types.void, [
    THLongTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THLongTensor_equal: [ref.types.int32, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_ltValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_leValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_gtValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_geValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_neValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_eqValueT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THLongTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_ltTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_leTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_gtTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_geTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_neTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_eqTensorT: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_abs: [ref.types.void, [
    THLongTensorPtr,
    THLongTensorPtr,
  ]],
  THFloatTensor_fill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_zero: [ref.types.void, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_maskedFill: [ref.types.void, [
    THFloatTensorPtr,
    THByteTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_maskedCopy: [ref.types.void, [
    THFloatTensorPtr,
    THByteTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_maskedSelect: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THByteTensorPtr,
  ]],
  THFloatTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexSelect: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THFloatTensor_indexCopy: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexAdd: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_indexFill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gather: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THFloatTensor_scatter: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_scatterFill: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_dot: [ref.types.double, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_minall: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_maxall: [ref.types.float, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_sumall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_prodall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_neg: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cinv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_add: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_sub: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_mul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_div: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_fmod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_remainder: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_clamp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatTensor_cadd: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_csub: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cpow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cdiv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cfmod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cremainder: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addcmul: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addcdiv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addr: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_addbmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_baddbmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_match: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_numel: [ref.types.long, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_max: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_min: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_kthvalue: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THFloatTensor_mode: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_median: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_sum: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_prod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cumsum: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cumprod: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_sign: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trace: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_cross: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_cmax: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cmaxValue: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_cminValue: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_zeros: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_ones: [ref.types.void, [
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_diag: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_eye: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_range: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THFloatTensor_randperm: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THFloatTensor_reshape: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_sort: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_topk: [ref.types.void, [
    THFloatTensorPtr,
    THLongTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_tril: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_triu: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
  ]],
  THFloatTensor_cat: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_catArray: [ref.types.void, [
    THFloatTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_equal: [ref.types.int32, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_ltValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_leValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_gtValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_geValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_neValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_eqValueT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ltTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_leTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_gtTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_neTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_eqTensorT: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sigmoid: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_log: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_log1p: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_exp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_acos: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_cosh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_asin: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sinh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_tan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_atan: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_atan2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_tanh: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_pow: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_tpow: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    THFloatTensorPtr,
  ]],
  THFloatTensor_sqrt: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_rsqrt: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ceil: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_floor: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_round: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_abs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trunc: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_frac: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_lerp: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_mean: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
  ]],
  THFloatTensor_std: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_var: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THFloatTensor_norm: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.int32,
  ]],
  THFloatTensor_renorm: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
    ref.types.int32,
    ref.types.float,
  ]],
  THFloatTensor_dist: [ref.types.double, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_histc: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.float,
    ref.types.float,
  ]],
  THFloatTensor_meanall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_varall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_stdall: [ref.types.double, [
    THFloatTensorPtr,
  ]],
  THFloatTensor_normall: [ref.types.double, [
    THFloatTensorPtr,
    ref.types.float,
  ]],
  THFloatTensor_linspace: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    ref.types.long,
  ]],
  THFloatTensor_logspace: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    ref.types.long,
  ]],
  THFloatTensor_rand: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THFloatTensor_randn: [ref.types.void, [
    THFloatTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_fill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_zero: [ref.types.void, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maskedFill: [ref.types.void, [
    THDoubleTensorPtr,
    THByteTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_maskedCopy: [ref.types.void, [
    THDoubleTensorPtr,
    THByteTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maskedSelect: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THByteTensorPtr,
  ]],
  THDoubleTensor_nonzero: [ref.types.void, [
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexSelect: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THDoubleTensor_indexCopy: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexAdd: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_indexFill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gather: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THDoubleTensor_scatter: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_scatterFill: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_dot: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_minall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_maxall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sumall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_prodall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neg: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cinv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_add: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_sub: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_mul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_div: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_fmod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_remainder: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_clamp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_cadd: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_csub: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cpow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cdiv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cfmod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cremainder: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addcmul: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addcdiv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addr: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_addbmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_baddbmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_match: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_numel: [ref.types.long, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_max: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_min: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_kthvalue: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THDoubleTensor_mode: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_median: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_sum: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_prod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cumsum: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cumprod: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_sign: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trace: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cross: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_cmax: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cmaxValue: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_cminValue: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_zeros: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_ones: [ref.types.void, [
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_diag: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_eye: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_range: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_randperm: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_reshape: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_sort: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_topk: [ref.types.void, [
    THDoubleTensorPtr,
    THLongTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_tril: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_triu: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
  ]],
  THDoubleTensor_cat: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_catArray: [ref.types.void, [
    THDoubleTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_equal: [ref.types.int32, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ltValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_leValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gtValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_geValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_neValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_eqValue: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_ltValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_leValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_gtValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_geValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_neValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_eqValueT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_ltTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_leTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_gtTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_eqTensor: [ref.types.void, [
    THByteTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ltTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_leTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_gtTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_neTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_eqTensorT: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sigmoid: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_log: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_log1p: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_exp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_acos: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_cosh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_asin: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sinh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_tan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_atan: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_atan2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_tanh: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_pow: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_tpow: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_sqrt: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_rsqrt: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ceil: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_floor: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_round: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_abs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trunc: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_frac: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_lerp: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_mean: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
  ]],
  THDoubleTensor_std: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_var: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THDoubleTensor_norm: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.int32,
  ]],
  THDoubleTensor_renorm: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.int32,
    ref.types.double,
  ]],
  THDoubleTensor_dist: [ref.types.double, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_histc: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.double,
    ref.types.double,
  ]],
  THDoubleTensor_meanall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_varall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_stdall: [ref.types.double, [
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_normall: [ref.types.double, [
    THDoubleTensorPtr,
    ref.types.double,
  ]],
  THDoubleTensor_linspace: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleTensor_logspace: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    ref.types.long,
  ]],
  THDoubleTensor_rand: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THDoubleTensor_randn: [ref.types.void, [
    THDoubleTensorPtr,
    THGeneratorPtr,
    THLongStoragePtr,
  ]],
  THByteTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2DRevger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2DRevgerm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv2Dger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmm: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv2Dcmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.uchar),
    ref.types.uchar,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.uchar),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv3DRevger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THByteTensor_conv3Dger: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dmv: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THByteTensor_conv3Dcmul: [ref.types.void, [
    THByteTensorPtr,
    ref.types.uchar,
    ref.types.uchar,
    THByteTensorPtr,
    THByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_validXCorr2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validConv2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullConv2Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2DRevger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2DRevgerm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv2Dger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmm: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv2Dcmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_validXCorr3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validConv3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_fullConv3Dptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.types.CString,
    ref.types.char,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv3DRevger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCharTensor_conv3Dger: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dmv: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCharTensor_conv3Dcmul: [ref.types.void, [
    THCharTensorPtr,
    ref.types.char,
    ref.types.char,
    THCharTensorPtr,
    THCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2DRevger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2DRevgerm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv2Dger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmm: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv2Dcmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.short),
    ref.types.short,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.short),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv3DRevger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THShortTensor_conv3Dger: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dmv: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THShortTensor_conv3Dcmul: [ref.types.void, [
    THShortTensorPtr,
    ref.types.short,
    ref.types.short,
    THShortTensorPtr,
    THShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2DRevger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2DRevgerm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv2Dger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmm: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv2Dcmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.int32),
    ref.types.int32,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.int32),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv3DRevger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THIntTensor_conv3Dger: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dmv: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THIntTensor_conv3Dcmul: [ref.types.void, [
    THIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
    THIntTensorPtr,
    THIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2DRevger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2DRevgerm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv2Dger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmm: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv2Dcmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.long),
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.long),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv3DRevger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THLongTensor_conv3Dger: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dmv: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THLongTensor_conv3Dcmul: [ref.types.void, [
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    THLongTensorPtr,
    THLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2DRevger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2DRevgerm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv2Dger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmm: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv2Dcmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.float),
    ref.types.float,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.float),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv3DRevger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THFloatTensor_conv3Dger: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dmv: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_conv3Dcmul: [ref.types.void, [
    THFloatTensorPtr,
    ref.types.float,
    ref.types.float,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_validXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullXCorr2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullConv2Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validXCorr2DRevptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2DRevger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2DRevgerm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv2Dger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmm: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv2Dcmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_validXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullXCorr3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_fullConv3Dptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_validXCorr3DRevptr: [ref.types.void, [
    ref.refType(ref.types.double),
    ref.types.double,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.refType(ref.types.double),
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv3DRevger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THDoubleTensor_conv3Dger: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dmv: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_conv3Dcmul: [ref.types.void, [
    THDoubleTensorPtr,
    ref.types.double,
    ref.types.double,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_gesv: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_trtrs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_gels: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_syev: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_geev: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_gesvd: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_gesvd2: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_getri: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_potrf: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_potrs: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_potri: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
  ]],
  THFloatTensor_qr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_geqrf: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_orgqr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_ormqr: [ref.types.void, [
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THFloatTensor_pstrf: [ref.types.void, [
    THFloatTensorPtr,
    THIntTensorPtr,
    THFloatTensorPtr,
    ref.types.CString,
    ref.types.float,
  ]],
  THDoubleTensor_gesv: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_trtrs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_gels: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_syev: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_geev: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_gesvd: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_gesvd2: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_getri: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_potrf: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_potrs: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_potri: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
  ]],
  THDoubleTensor_qr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_geqrf: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_orgqr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_ormqr: [ref.types.void, [
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THDoubleTensor_pstrf: [ref.types.void, [
    THDoubleTensorPtr,
    THIntTensorPtr,
    THDoubleTensorPtr,
    ref.types.CString,
    ref.types.double,
  ]],
  THCudaByteTensor_storage: [THCudaByteStoragePtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
  ]],
  THCudaByteTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
  ]],
  THCudaByteTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_data: [ref.refType(ref.types.uchar), [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.char,
  ]],
  THCudaByteTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.char,
  ]],
  THCudaByteTensor_new: [THCudaByteTensorPtr, [
    THCStatePtr,
  ]],
  THCudaByteTensor_newWithTensor: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_newWithStorage: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_newWithStorage1d: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithStorage2d: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithStorage3d: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithStorage4d: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithSize: [THCudaByteTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_newWithSize1d: [THCudaByteTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithSize2d: [THCudaByteTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithSize3d: [THCudaByteTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newWithSize4d: [THCudaByteTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newClone: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_newContiguous: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_newSelect: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaByteTensor_newNarrow: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_newTranspose: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaByteTensor_newUnfold: [THCudaByteTensorPtr, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaByteTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaByteTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaByteTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
  ]],
  THCudaByteTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.uchar,
  ]],
  THCudaByteTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THCudaByteTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THCudaByteTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.uchar,
  ]],
  THCudaByteTensor_get1d: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_get2d: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_get3d: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_get4d: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaByteTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaCharTensor_storage: [THCudaCharStoragePtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
  ]],
  THCudaCharTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
  ]],
  THCudaCharTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_data: [ref.types.CString, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_new: [THCudaCharTensorPtr, [
    THCStatePtr,
  ]],
  THCudaCharTensor_newWithTensor: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_newWithStorage: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_newWithStorage1d: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithStorage2d: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithStorage3d: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithStorage4d: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithSize: [THCudaCharTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_newWithSize1d: [THCudaCharTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithSize2d: [THCudaCharTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithSize3d: [THCudaCharTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newWithSize4d: [THCudaCharTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newClone: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_newContiguous: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_newSelect: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaCharTensor_newNarrow: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_newTranspose: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaCharTensor_newUnfold: [THCudaCharTensorPtr, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaCharTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaCharTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaCharTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
  ]],
  THCudaCharTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.char,
  ]],
  THCudaCharTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCudaCharTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCudaCharTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.char,
  ]],
  THCudaCharTensor_get1d: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_get2d: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_get3d: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_get4d: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaCharTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaShortTensor_storage: [THCudaShortStoragePtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
  ]],
  THCudaShortTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
  ]],
  THCudaShortTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_data: [ref.refType(ref.types.short), [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.char,
  ]],
  THCudaShortTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.char,
  ]],
  THCudaShortTensor_new: [THCudaShortTensorPtr, [
    THCStatePtr,
  ]],
  THCudaShortTensor_newWithTensor: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_newWithStorage: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_newWithStorage1d: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithStorage2d: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithStorage3d: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithStorage4d: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithSize: [THCudaShortTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_newWithSize1d: [THCudaShortTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithSize2d: [THCudaShortTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithSize3d: [THCudaShortTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newWithSize4d: [THCudaShortTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newClone: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_newContiguous: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_newSelect: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaShortTensor_newNarrow: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_newTranspose: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaShortTensor_newUnfold: [THCudaShortTensorPtr, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaShortTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaShortTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaShortTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
  ]],
  THCudaShortTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.short,
  ]],
  THCudaShortTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THCudaShortTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THCudaShortTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.short,
  ]],
  THCudaShortTensor_get1d: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_get2d: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_get3d: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_get4d: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaShortTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaIntTensor_storage: [THCudaIntStoragePtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_data: [ref.refType(ref.types.int32), [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.char,
  ]],
  THCudaIntTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.char,
  ]],
  THCudaIntTensor_new: [THCudaIntTensorPtr, [
    THCStatePtr,
  ]],
  THCudaIntTensor_newWithTensor: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_newWithStorage: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_newWithStorage1d: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithStorage2d: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithStorage3d: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithStorage4d: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithSize: [THCudaIntTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_newWithSize1d: [THCudaIntTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithSize2d: [THCudaIntTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithSize3d: [THCudaIntTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newWithSize4d: [THCudaIntTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newClone: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_newContiguous: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_newSelect: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaIntTensor_newNarrow: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_newTranspose: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntTensor_newUnfold: [THCudaIntTensorPtr, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaIntTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaIntTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaIntTensor_get1d: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_get2d: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_get3d: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_get4d: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaIntTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaLongTensor_storage: [THCudaLongStoragePtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_data: [ref.refType(ref.types.long), [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.char,
  ]],
  THCudaLongTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.char,
  ]],
  THCudaLongTensor_new: [THCudaLongTensorPtr, [
    THCStatePtr,
  ]],
  THCudaLongTensor_newWithTensor: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_newWithStorage: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_newWithStorage1d: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithStorage2d: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithStorage3d: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithStorage4d: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithSize: [THCudaLongTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_newWithSize1d: [THCudaLongTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithSize2d: [THCudaLongTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithSize3d: [THCudaLongTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newWithSize4d: [THCudaLongTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newClone: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_newContiguous: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_newSelect: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaLongTensor_newNarrow: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_newTranspose: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaLongTensor_newUnfold: [THCudaLongTensorPtr, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaLongTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaLongTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaLongTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_get1d: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_get2d: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_get3d: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_get4d: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaLongTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaHalfTensor_storage: [THCudaHalfStoragePtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
  ]],
  THCudaHalfTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
  ]],
  THCudaHalfTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_data: [halfPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.char,
  ]],
  THCudaHalfTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.char,
  ]],
  THCudaHalfTensor_new: [THCudaHalfTensorPtr, [
    THCStatePtr,
  ]],
  THCudaHalfTensor_newWithTensor: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_newWithStorage: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_newWithStorage1d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithStorage2d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithStorage3d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithStorage4d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithSize: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_newWithSize1d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithSize2d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithSize3d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newWithSize4d: [THCudaHalfTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newClone: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_newContiguous: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_newSelect: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaHalfTensor_newNarrow: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_newTranspose: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaHalfTensor_newUnfold: [THCudaHalfTensorPtr, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaHalfTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaHalfTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaHalfTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
  ]],
  THCudaHalfTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    half,
  ]],
  THCudaHalfTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    half,
  ]],
  THCudaHalfTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    half,
  ]],
  THCudaHalfTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    half,
  ]],
  THCudaHalfTensor_get1d: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_get2d: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_get3d: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_get4d: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaHalfTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaTensor_storage: [THCudaStoragePtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
  ]],
  THCudaTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
  ]],
  THCudaTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_data: [ref.refType(ref.types.float), [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.char,
  ]],
  THCudaTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.char,
  ]],
  THCudaTensor_new: [THCudaTensorPtr, [
    THCStatePtr,
  ]],
  THCudaTensor_newWithTensor: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_newWithStorage: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_newWithStorage1d: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithStorage2d: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithStorage3d: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithStorage4d: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithSize: [THCudaTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_newWithSize1d: [THCudaTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaTensor_newWithSize2d: [THCudaTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithSize3d: [THCudaTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newWithSize4d: [THCudaTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newClone: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_newContiguous: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_newSelect: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaTensor_newNarrow: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_newTranspose: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_newUnfold: [THCudaTensorPtr, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
  ]],
  THCudaTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaTensor_get1d: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_get2d: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_get3d: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_get4d: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaDoubleTensor_storage: [THCudaDoubleStoragePtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_storageOffset: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_nDimension: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_size: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_stride: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_newSizeOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_newStrideOf: [THLongStoragePtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_data: [ref.refType(ref.types.double), [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_setFlag: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.char,
  ]],
  THCudaDoubleTensor_clearFlag: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.char,
  ]],
  THCudaDoubleTensor_new: [THCudaDoubleTensorPtr, [
    THCStatePtr,
  ]],
  THCudaDoubleTensor_newWithTensor: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_newWithStorage: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_newWithStorage1d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithStorage2d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithStorage3d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithStorage4d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithSize: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_newWithSize1d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithSize2d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithSize3d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newWithSize4d: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newClone: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_newContiguous: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_newSelect: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newNarrow: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_newTranspose: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_newUnfold: [THCudaDoubleTensorPtr, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_resize: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_resizeAs: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_resize1d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_resize2d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_resize3d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_resize4d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_resize5d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_rawResize: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.refType(ref.types.long),
    ref.refType(ref.types.long),
  ]],
  THCudaDoubleTensor_set: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_setStorage: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    THLongStoragePtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_setStorage1d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_setStorage2d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_setStorage3d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_setStorage4d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleStoragePtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_narrow: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_select: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
  ]],
  THCudaDoubleTensor_transpose: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_unfold: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_squeeze: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_squeeze1d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_isContiguous: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_isSameSizeAs: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_isSetTo: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_isSize: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_nElement: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_retain: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_free: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_freeCopyTo: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_set1d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.double,
  ]],
  THCudaDoubleTensor_set2d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THCudaDoubleTensor_set3d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THCudaDoubleTensor_set4d: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.double,
  ]],
  THCudaDoubleTensor_get1d: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_get2d: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_get3d: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_get4d: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaDoubleTensor_getTextureObject: [ref.types.ulonglong, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_getDevice: [ref.types.int32, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_checkGPU: [ref.types.int32, [
    THCStatePtr,
    ref.types.uint32,
  ]],
  THCudaByteTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaByteTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaByteTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaByteTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaByteTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaByteTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaByteTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaByteTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THCudaByteTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCharTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THShortTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THIntTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THLongTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THFloatTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THDoubleTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THByteTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaByteTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
  ]],
  THByteTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaCharTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaCharTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaCharTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaCharTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaCharTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaCharTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaCharTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THCudaCharTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCharTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THShortTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THIntTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THLongTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THFloatTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THDoubleTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCharTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaCharTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCharTensorPtr,
  ]],
  THCharTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaShortTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaShortTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaShortTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaShortTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaShortTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaShortTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaShortTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THCudaShortTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCharTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THShortTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THIntTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THLongTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THFloatTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THDoubleTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THShortTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaShortTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THShortTensorPtr,
  ]],
  THShortTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaIntTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaIntTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaIntTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaIntTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaIntTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaIntTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaIntTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THCudaIntTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCharTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THShortTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THIntTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THLongTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THFloatTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THDoubleTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THIntTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaIntTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THIntTensorPtr,
  ]],
  THIntTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaLongTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaLongTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaLongTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaLongTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaLongTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaLongTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaLongTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THCudaLongTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCharTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THShortTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THIntTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THLongTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THFloatTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THDoubleTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THLongTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaLongTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongTensorPtr,
  ]],
  THLongTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaHalfTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaHalfTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaHalfTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaHalfTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaHalfTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaHalfTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaHalfTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THCudaHalfTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCharTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THShortTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THIntTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THLongTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THFloatTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THDoubleTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THCudaTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaTensorPtr,
  ]],
  THCharTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaTensorPtr,
  ]],
  THShortTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaTensorPtr,
  ]],
  THIntTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaTensorPtr,
  ]],
  THLongTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THFloatTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaTensorPtr,
  ]],
  THDoubleTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THFloatTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THFloatTensorPtr,
  ]],
  THFloatTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_copy: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyIgnoringOverlaps: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaDoubleTensor_copyChar: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCharTensorPtr,
  ]],
  THCudaDoubleTensor_copyShort: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THShortTensorPtr,
  ]],
  THCudaDoubleTensor_copyInt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THIntTensorPtr,
  ]],
  THCudaDoubleTensor_copyLong: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THLongTensorPtr,
  ]],
  THCudaDoubleTensor_copyFloat: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THFloatTensorPtr,
  ]],
  THCudaDoubleTensor_copyDouble: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyCudaByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaChar: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaShort: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaInt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaLong: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaFloat: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THCudaDoubleTensor_copyCudaHalf: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    voidPtr,
  ]],
  THByteTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THByteTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCharTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THCharTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THShortTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THShortTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THIntTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THIntTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THLongTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THFloatTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THFloatTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THDoubleTensor_copyCudaDouble: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THDoubleTensor_copyCuda: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyCPU: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_copyAsyncCPU: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THDoubleTensorPtr,
  ]],
  THDoubleTensor_copyAsyncCuda: [ref.types.void, [
    THCStatePtr,
    THDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCRandom_init: [ref.types.void, [
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCRandom_shutdown: [ref.types.void, [
    voidPtr,
  ]],
  THCRandom_setGenerator: [ref.types.void, [
    voidPtr,
    ref.types.int32,
  ]],
  THCRandom_seed: [ref.types.ulong, [
    voidPtr,
  ]],
  THCRandom_seedAll: [ref.types.ulong, [
    voidPtr,
  ]],
  THCRandom_manualSeed: [ref.types.void, [
    voidPtr,
    ref.types.ulong,
  ]],
  THCRandom_manualSeedAll: [ref.types.void, [
    voidPtr,
    ref.types.ulong,
  ]],
  THCRandom_initialSeed: [ref.types.ulong, [
    voidPtr,
  ]],
  THCRandom_getRNGState: [ref.types.void, [
    voidPtr,
    THByteTensorPtr,
  ]],
  THCRandom_setRNGState: [ref.types.void, [
    voidPtr,
    THByteTensorPtr,
  ]],
  THCudaTensor_geometric: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
  ]],
  THCudaTensor_bernoulli: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
  ]],
  THCudaTensor_uniform: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaTensor_normal: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaTensor_exponential: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
  ]],
  THCudaTensor_cauchy: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaTensor_logNormal: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.double,
    ref.types.double,
  ]],
  THCudaTensor_multinomial: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaByteTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaCharTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaShortTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaIntTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaLongTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaHalfTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_fill: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_zero: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_zeros: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_ones: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_reshape: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaDoubleTensor_numel: [ref.types.long, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaByteTensor_dot: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_dot: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_dot: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_dot: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_dot: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_dot: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_dot: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_dot: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_addmv: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_addmm: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_addr: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_addbmm: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_baddbmm: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaByteTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaCharTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaShortTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaIntTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaDoubleTensor_add: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_sub: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_mul: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_div: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaByteTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_sigmoid: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_log: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_log1p: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_exp: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cos: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_acos: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cosh: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_sin: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_asin: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_sinh: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_tan: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_atan: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_atan2: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_tanh: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_pow: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.float,
  ]],
  THCudaHalfTensor_tpow: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.float,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_sqrt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_rsqrt: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_ceil: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_floor: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_round: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_trunc: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_frac: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_lerp: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.float,
  ]],
  THCudaHalfTensor_neg: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cinv: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_sigmoid: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_log: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_log1p: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_exp: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cos: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_acos: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cosh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_sin: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_asin: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_sinh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_tan: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_atan: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_atan2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_tanh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_pow: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_tpow: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
  ]],
  THCudaTensor_sqrt: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_rsqrt: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_ceil: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_floor: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_round: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_trunc: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_frac: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_lerp: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_neg: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cinv: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
  ]],
  THCudaTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_sigmoid: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_log: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_log1p: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_exp: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cos: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_acos: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cosh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_sin: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_asin: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_sinh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_tan: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_atan: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_atan2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_tanh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_pow: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.float,
  ]],
  THCudaDoubleTensor_tpow: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.float,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_sqrt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_rsqrt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_ceil: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_floor: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_round: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_trunc: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_frac: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_lerp: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.float,
  ]],
  THCudaDoubleTensor_neg: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cinv: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_abs: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_sign: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cadd: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_csub: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cmul: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cpow: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_cdiv: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaByteTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_sumall: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_prodall: [ref.types.long, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaByteTensor_minall: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_maxall: [ref.types.uchar, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_sumall: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_prodall: [ref.types.long, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
    ref.types.long,
  ]],
  THCudaCharTensor_minall: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_maxall: [ref.types.char, [
    THCStatePtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_sumall: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_prodall: [ref.types.long, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
    ref.types.long,
  ]],
  THCudaShortTensor_minall: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_maxall: [ref.types.short, [
    THCStatePtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_sumall: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_prodall: [ref.types.long, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
    ref.types.long,
  ]],
  THCudaIntTensor_minall: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_maxall: [ref.types.int32, [
    THCStatePtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_sumall: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_prodall: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_minall: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_maxall: [ref.types.long, [
    THCStatePtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_sumall: [ref.types.float, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_prodall: [ref.types.float, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_minall: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_maxall: [half, [
    THCStatePtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_sumall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_prodall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_minall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_maxall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_sum: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_prod: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_sumall: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_prodall: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_min: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_max: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.long,
  ]],
  THCudaDoubleTensor_minall: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_maxall: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaByteTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaCharTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.char,
  ]],
  THCudaShortTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.short,
  ]],
  THCudaIntTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaHalfTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    half,
  ]],
  THCudaTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaDoubleTensor_ltValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_gtValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_leValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_geValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_eqValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_neValue: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_ltValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_gtValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_leValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_geValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_eqValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_neValueT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaByteTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaShortTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaIntTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaLongTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_ltTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_gtTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_leTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_geTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_eqTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_neTensor: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_ltTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_gtTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_leTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_geTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_eqTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_neTensorT: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaByteTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaCharTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaByteTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THByteTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaByteTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THByteTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaCharTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaShortTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaByteTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THByteTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaByteTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THByteTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaShortTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaIntTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THByteTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaByteTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THByteTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaIntTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaLongTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THByteTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THByteTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaLongTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaHalfTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaByteTensorPtr,
    half,
  ]],
  THCudaHalfTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THByteTensorPtr,
    half,
  ]],
  THCudaHalfTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaByteTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THByteTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaHalfTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaByteTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THByteTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaByteTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THByteTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaDoubleTensor_maskedFill: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaByteTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_maskedFillByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THByteTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_maskedCopy: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaByteTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_maskedCopyByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THByteTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_maskedSelect: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaDoubleTensor_maskedSelectByte: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THByteTensorPtr,
  ]],
  THCudaByteTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaByteTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.uchar,
  ]],
  THCudaCharTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaCharTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.char,
  ]],
  THCudaShortTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaShortTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.short,
  ]],
  THCudaIntTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaIntTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaLongTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaHalfTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    half,
  ]],
  THCudaTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.float,
  ]],
  THCudaDoubleTensor_gather: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaDoubleTensor_scatter: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_scatterFill: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.double,
  ]],
  THCudaByteTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaByteTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.uchar,
  ]],
  THCudaByteTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaCharTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaCharTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaCharTensorPtr,
  ]],
  THCudaCharTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.char,
  ]],
  THCudaCharTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaShortTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaShortTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaShortTensorPtr,
  ]],
  THCudaShortTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.short,
  ]],
  THCudaShortTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaIntTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaIntTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaIntTensorPtr,
  ]],
  THCudaIntTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.int32,
  ]],
  THCudaIntTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaLongTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaLongTensorPtr,
  ]],
  THCudaLongTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.long,
  ]],
  THCudaLongTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaHalfTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    half,
  ]],
  THCudaHalfTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaHalfTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaHalfTensorPtr,
  ]],
  THCudaHalfTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    half,
  ]],
  THCudaHalfTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaDoubleTensor_indexCopy: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_indexAdd: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_indexFill: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_indexSelect: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THCudaLongTensorPtr,
  ]],
  THCudaDoubleTensor_indexCopy_long: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_indexAdd_long: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_indexFill_long: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_indexSelect_long: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    THLongTensorPtr,
  ]],
  THCudaByteTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaByteTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaByteTensorPtr,
    THCudaLongTensorPtr,
    THCudaByteTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaCharTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaCharTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaCharTensorPtr,
    THCudaLongTensorPtr,
    THCudaCharTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaShortTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaShortTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaShortTensorPtr,
    THCudaLongTensorPtr,
    THCudaShortTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaIntTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaIntTensorPtr,
    THCudaLongTensorPtr,
    THCudaIntTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaLongTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaLongTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaHalfTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaHalfTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaHalfTensorPtr,
    THCudaLongTensorPtr,
    THCudaHalfTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_sortKeyValueInplace: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaLongTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaDoubleTensor_sort: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaLongTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_tril: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_triu: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_diag: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_trace: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addcmul: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_addcdiv: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cumsum: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_cumprod: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_cmin: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cmax: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cminValue: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_cmaxValue: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_cross: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
  ]],
  THCudaTensor_clamp: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    ref.types.float,
  ]],
  THCudaTensor_gesv: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_gels: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_syev: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.CString,
    ref.types.CString,
  ]],
  THCudaTensor_geev: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.CString,
  ]],
  THCudaTensor_gesvd: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.CString,
  ]],
  THCudaTensor_gesvd2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.CString,
  ]],
  THCudaTensor_getri: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_potri: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_potrf: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_potrs: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_qr: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_cat: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.int32,
  ]],
  THCudaTensor_catArray: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    voidPtr,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_meanall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_mean: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_varall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_var: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaTensor_stdall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_std: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.int32,
  ]],
  THCudaTensor_normall: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_norm: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    ref.types.long,
  ]],
  THCudaTensor_renorm: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
    ref.types.long,
    ref.types.float,
  ]],
  THCudaTensor_dist: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_rand: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaTensor_randn: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THLongStoragePtr,
  ]],
  THCudaByteTensor_logicalall: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaByteTensor_logicalany: [ref.types.int32, [
    THCStatePtr,
    THCudaByteTensorPtr,
  ]],
  THCudaTensor_conv2Dmv: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
  ]],
  THCudaTensor_conv2Dmm: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    ref.types.CString,
  ]],
  THCudaTensor_conv2DRevger: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.float,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_conv2DRevgerm: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    ref.types.float,
    ref.types.float,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
  ]],
  THCudaTensor_conv2Dmap: [ref.types.void, [
    voidPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.long,
    THCudaTensorPtr,
    ref.types.long,
  ]],
  THCudaTensor_topk: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaLongTensorPtr,
    THCudaTensorPtr,
    ref.types.long,
    ref.types.int32,
    ref.types.int32,
    ref.types.int32,
  ]],
  THCudaTensor_dx_neg: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_add_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acc_add_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_add_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acc_add_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_sub_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acc_sub_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_sub_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acc_sub_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_mul_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_mul_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_mul_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_mul_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_mul_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_mul_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_div_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_div_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_div_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_div_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_div_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_div_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_sqrt: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_exp: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_log: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_pow_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_pow_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_pow_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_pow_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_pow_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_pow_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_sin: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_cos: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_tan: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_asin: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acos: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_atan: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_atan2_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_atan2_f1: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_atan2_f1: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_atan2_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_const_atan2_f2: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_acc_atan2_f2: [ref.types.float, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    ref.types.float,
  ]],
  THCudaTensor_dx_sinh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_cosh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_tanh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_asinh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_acosh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_atanh: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaTensor_dx_sigmoid: [ref.types.void, [
    THCStatePtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
    THCudaTensorPtr,
  ]],
  THCudaDoubleTensor_dx_neg: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_add_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acc_add_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_add_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acc_add_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_sub_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acc_sub_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_sub_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acc_sub_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_mul_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_mul_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_mul_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_mul_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_mul_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_mul_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_div_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_div_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_div_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_div_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_div_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_div_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_sqrt: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_exp: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_log: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_pow_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_pow_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_pow_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_pow_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_pow_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_pow_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_sin: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_cos: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_tan: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_asin: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acos: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_atan: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_atan2_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_atan2_f1: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_atan2_f1: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_atan2_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_const_atan2_f2: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_acc_atan2_f2: [ref.types.double, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    ref.types.double,
  ]],
  THCudaDoubleTensor_dx_sinh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_cosh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_tanh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_asinh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_acosh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_atanh: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
  THCudaDoubleTensor_dx_sigmoid: [ref.types.void, [
    THCStatePtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
    THCudaDoubleTensorPtr,
  ]],
});

